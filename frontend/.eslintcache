[{"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\index.js":"1","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\Button.js":"2","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\BoardInputForm.js":"3","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Counter.js":"4","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Home.js":"5","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Router.js":"6","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Chart.js":"7","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinancialTable.js":"8","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\LinkedList.js":"9","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinSearchTable.js":"10","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\RootReducer.ts":"11","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\SearchReducer.ts":"12","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\store\\index.ts":"13","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NavBar.tsx":"14","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NotFound.tsx":"15"},{"size":1331,"mtime":1628006077130,"results":"16","hashOfConfig":"17"},{"size":719,"mtime":1616582396855,"results":"18","hashOfConfig":"19"},{"size":1193,"mtime":1625029349568,"results":"20","hashOfConfig":"21"},{"size":2929,"mtime":1618032015001,"results":"22","hashOfConfig":"17"},{"size":9165,"mtime":1628004611089,"results":"23","hashOfConfig":"17"},{"size":1329,"mtime":1627199165186,"results":"24","hashOfConfig":"17"},{"size":11828,"mtime":1627798306123,"results":"25","hashOfConfig":"17"},{"size":21750,"mtime":1627979046884,"results":"26","hashOfConfig":"17"},{"size":1992,"mtime":1627478020580,"results":"27","hashOfConfig":"21"},{"size":25227,"mtime":1627818639727,"results":"28","hashOfConfig":"17"},{"size":893,"mtime":1628005865827,"results":"29","hashOfConfig":"17"},{"size":1097,"mtime":1628005729169,"results":"30","hashOfConfig":"17"},{"size":243,"mtime":1628005956349,"results":"31","hashOfConfig":"17"},{"size":3492,"mtime":1628006113333,"results":"32","hashOfConfig":"17"},{"size":270,"mtime":1628006174620,"results":"33","hashOfConfig":"17"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uacwk4",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"zefywn",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"130xh85",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\index.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\Button.js",[],["76","77"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\BoardInputForm.js",[],["78","79"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Counter.js",[],["80","81"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Home.js",["82","83","84","85","86"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport '../CSS/Style.css';\r\n\r\nimport TitleBar from '../components/NavBar';\r\nimport CandleChart from '../components/Chart';\r\nimport FinancialTable from '../components/FinancialTable';\r\nimport FinSearchTable from '../components/FinSearchTable';\r\n\r\n/*\r\n  1. 종목조건 검색\r\n  2. 포트폴리오 셀렉션\r\n  3. 뉴스/공시 (크롤링?)\r\n  4. 연간실적\r\n  5. 동종업 실적 비교\r\n\r\n  6. UI,CSS,레이아웃 조정\r\n  7. 처음 보여줄 데이터 기준 정하기\r\n  8. 최근 검색 항목 보여주기\r\n  9. 현재 검색한 종목의 최근 종가 표시\r\n  10. 코스피, 코스닥, 금리등의 정보 표시\r\n  11. 적절한 위치에 업종 표시\r\n  12. 검색창 개선하기\r\n*/\r\nexport default function Home() {\r\n    const [result, setResult] = useState(0);\r\n    // 실적표, 조건검색표 가시, 비가시 상태 초기화\r\n    const [finVisible, setFinVisible] = useState({ visibility: 'hidden', float: 'right' });\r\n    const [perVisible, setPerVisible] = useState({ visibility: 'visible', float: 'right' });\r\n    const [component, setComponent] = useState(false);\r\n\r\n\r\n    // 리덕스 스토어로부터 검색정보 받기\r\n    const { code, compName } = useSelector(\r\n        state => ({\r\n            code: state.searchReducer.code,\r\n            compName: state.searchReducer.comp_name,\r\n        }), shallowEqual);\r\n\r\n\r\n\r\n\r\n    // // 계산 요청 메소드(POST)\r\n    // const CalRequest = async(e) => {\r\n    //     try {\r\n    //         e.preventDefault();  // 페이지 새로고침 막기\r\n    //         const RandomId = Math.random().toString(36).substr(2,11);\r\n\r\n    //         const url = `/api/cal-request/`;\r\n\r\n    //         await axios.post(url, {\r\n    //             id: RandomId,\r\n    //             operand_a: e.target.operand_a.value,\r\n    //             operand_b: e.target.operand_b.value,\r\n    //             operator: e.target.operator.value\r\n    //         });\r\n\r\n    //         GetResponse(RandomId);\r\n    //         // DeleteResults(RandomId);\r\n\r\n    //     } catch (error) {\r\n    //         // 데이터를 전송하지 못한것에 대한 예외처리 필요\r\n    //         console.error(error);\r\n    //     };\r\n    // };\r\n\r\n    // // 계산된 값을 받는 메소드\r\n    // const GetResponse = async(id) => {\r\n    //     // 병렬처리 하기 위해선 로딩이 필요하다. 아니면 리스팅 시간을 없애던가, response 됐다는 신호가 필요하다. \r\n    //     try {\r\n    //         const response = await axios.get(`/api/cal-response/?id=${id}`);\r\n    //         setResult(response.data.results[0].return_val);\r\n\r\n    //         // 처리된 response는 삭제(삭제하기전에 필요하다면 값 저장)\r\n    //         await axios.delete(`/api/cal-response/${id}`); // delete 할 때는 쿼리스트링 형식은 404에러남\r\n    //     } catch (error) {\r\n    //         // 데이터를 읽지 못한 경우에 대한 예외처리 필요 (그럴 경우 현재 방식으로는 response에 값들이 남아 있게 된다.)\r\n    //         console.error(error);\r\n    //     }\r\n    // };\r\n\r\n    // 조건검색 전환 버튼 제어 함수\r\n    /*\r\n        1. 버튼 제어(클릭시 재무실적표 컴포넌트와 조건검색 컴포넌트 태그 교체 또는 비쥬블처리, 버튼도 조건검색, 재무실적표 버튼 교체처리)\r\n        2. \r\n    */\r\n    const changeComponent = (e) => {\r\n        const btnState = e.target.value;\r\n\r\n        switch (btnState) {\r\n            case \"조건검색\":\r\n                // 버튼 상태 처리 \r\n                setFinVisible({ visibility: 'visible', float: 'right' });\r\n                setPerVisible({ visibility: 'hidden' });\r\n                setComponent(true);\r\n                break;\r\n            case \"실적표\":\r\n                setFinVisible({ visibility: 'hidden', float: 'right' });\r\n                setPerVisible({ visibility: 'visible', float: 'right' });\r\n                setComponent(false);\r\n                break;\r\n            default:\r\n                setFinVisible({ visibility: 'hidden', float: 'right' });\r\n                setPerVisible({ visibility: 'visible', float: 'right' });\r\n                setComponent(false);\r\n        }\r\n    };\r\n\r\n    /* HTML */\r\n    return (\r\n        <div>\r\n            {/* 네비를 라우터에 어떻게 동작하게 해야하나? 검색 기능 구현, 라우터에서 동작 설계 */}\r\n            {/* fiexd position 적용 */}\r\n            <div className=\"container-fluid\">\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12\">\r\n                        <div className=\"nav-div\">\r\n                            <TitleBar />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {/* 콘텐츠 레이아웃 */}\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-sm-12\">\r\n                        {/* 서브네비 */}\r\n                        <div className=\"compinfo-text\">\r\n                            {/* 레이아웃 유지를 위한 공란 */}\r\n                            <div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n                        {/* 차트 */}\r\n                        <CandleChart />\r\n                    </div>\r\n\r\n                    <div className=\"col-sm-6 mx-auto\" style={{ marginTop: \"70px\" }}>\r\n                        {/* 재무,조건검색 */}\r\n                        <div className=\"home-table-change-btn-div\">\r\n                            {/* 버튼을 누르면  조건검색 버튼 -> 재무실적 버튼, 재무실적 테이블 -> 조건검색 테이블*/}\r\n                            <input type=\"button\" name=\"componentChangeBtn\" onClick={changeComponent} className=\"btn btn-primary\" style={perVisible} value=\"조건검색\" />\r\n                            <input type=\"button\" name=\"componentChangeBtn\" onClick={changeComponent} className=\"btn btn-primary\" style={finVisible} value=\"실적표\" />\r\n                        </div>\r\n                        {component ? <FinSearchTable /> : <FinancialTable />}\r\n\r\n                    </div>\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n                        {/* 뉴스사이트에서 해당 종목의 뉴스 헤드라인을 어떻게 끌어모아 표시할것인가 */}\r\n                        {/* 뉴스/공시 */}\r\n                    </div>\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n                        {/* 파이썬 로직 서버에 임의의 사용자 요청에 대한 응답을 어떻게 줄 것인가 */}\r\n                        {/* 포트폴리오 */}\r\n\r\n                        {/* 파이썬과 rest api를 이용해 간단한 통신해보기 */}\r\n                        {/* 종목조건 검색 */}\r\n                        {/* <form onSubmit={CalRequest}>\r\n                            <input name='operand_a' className='m-2' type='number' />\r\n                            <input name='operand_b' type='number' /> */}\r\n\r\n                        {/* <select name='operator'> */}\r\n                        {/* input 에 입력한 숫자와 이 값들을 버튼을 클릭하면 CalRequest 함수로 보내야한다. */}\r\n                        {/* <option type='text' value='add'>더하기</option>\r\n                                <option type='text' value='sub'>빼기</option>\r\n                                <option type='text' value='multi'>곱하기</option>\r\n                                <option type='text' value='div'>나누기</option>\r\n                            </select>\r\n\r\n                            <input type='submit' id='cal' value='연산요청' />\r\n                        </form> */}\r\n\r\n                        {/* 결과값 */}\r\n                        {/* <h2>{result}</h2> */}\r\n                    </div>\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n                        {/* 동종업 실적 비교 */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* 푸터 */}\r\n            <div className=\"container-fluid\">\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12\" style={{ padding: \"0px\" }}>\r\n                        <footer\r\n                            className=\"text-center text-lg-start text-white\"\r\n                            style={{ backgroundColor: \"#3e4551\" }}\r\n                        >\r\n                            {/* 텍스트 div */}\r\n                            <div\r\n                                className=\"text-center p-1\"\r\n                                style={{ backgroundColor: \"rgba(1, 0, 0, 0.2)\", width: \"100%\" }}\r\n                            >\r\n                                <p>Copyright 2021. Morris all rights reserved</p>\r\n                            </div>\r\n\r\n                        </footer>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Router.js",["87"],"import React from 'react';\r\nimport { BrowserRouter as Router,\r\n    Route, \r\n    Link, \r\n    Switch } from 'react-router-dom';\r\n\r\n/* components */\r\nimport NotFound from '../components/NotFound';\r\nimport Home from './Home';\r\n\r\nexport default function Routing () {\r\n\r\n    // url 이동할 때 이전 앱의 상태값은 날라가지 않는다.\r\n    // 개발진행이 멈칫할때는 이해 안되는 부분 파악해서 바로 공부하기\r\n    // 현재 문제점 컴포넌트 자체에 링크를 걸어버려서 해당 컴포넌트 안에 어떤 요소가 있던 클릭하면 같은 위치로 이동되버린다.\r\n    // 라우터 사용법을 좀 더 공부해야한다. (라우터 기능의 개념 이해하기)\r\n    return (\r\n        <Router>\r\n                    {/* <ul>\r\n                        <li><Link to=\"/companylist\">기업리스트</Link></li>\r\n                    </ul> */}\r\n\r\n                {/* 주소창의 경로와 매칭될 경우 보여줄 컴포넌트 할당 */}\r\n                {/* path에 후행 슬래시를 넣지 않으면 빌드시 에러 발생 예: /companylist (x) /companylist/ (o) */}\r\n                <Switch>\r\n                    <Route path=\"/\"  exact={true}><Home /></Route>\r\n                    <Route path=\"*\"><NotFound /></Route>\r\n                </Switch>\r\n\r\n        </Router>\r\n    );\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Chart.js",["88","89","90","91","92"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\n/*\r\n  1. 디스포즈 구현 (DOM 제어 에러 발생)\r\n  2. 성능 최적화 (느림)\r\n  3. UI 꾸미기 (버튼, from, to input 상자, 캔들 색상)\r\n  4. 수정주가 계산및 구현\r\n  5. 이동평균선, MACD, 추세선등등 기능 확장\r\n*/\r\n\r\nexport default function Charts() {\r\n  const chart = useRef(null);\r\n  // 현재 선택한 종목의 종가\r\n  const [closePrice, setClosePrice] = useState();\r\n  const [lastUpdatePrice, setLastUpdatePrice] = useState();\r\n  const [sec, setSec] = useState();\r\n  // useRef\r\n\r\n  // 종목코드 상태 참조\r\n  const { code, compName, sec_nm } = useSelector(\r\n    state => ({\r\n      code: state.searchReducer.code,\r\n      compName: state.searchReducer.comp_name,\r\n      sec_nm: state.searchReducer.sec_nm,\r\n    }), shallowEqual);\r\n\r\n  // 라이프 사이클을 고려하지 않으면 새로고침할때 2개의 차트가 생겨버린다. \r\n  // 따라서 코딩 당시 판단으로 useEffect에 차트 코드를 넣을수 밖에 없었음\r\n  useEffect(() => {\r\n    // CandleChart();\r\n    getPrice();\r\n    /* Chart code */\r\n    // Themes begin\r\n    am4core.useTheme(am4themes_animated);\r\n    //Themes end\r\n\r\n    // Create chart \r\n    let x = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n    x.padding(0, 15, 0, 15);\r\n\r\n    /* 데이터를 취득하지 못했던 이유: \r\n       1. 쿼리스트링 오타 => code를 id로 표시함\r\n       2. 백엔드에서 페이징을 걸어버려서 JSON 형식이 amcharts4가 읽지 못하는 형식이 되버림\r\n    */\r\n    x.dataSource.url = `/api/daily-price/?code=${code}`;  // 배포용\r\n\r\n    x.dataSource.parser = new am4core.JSONParser();\r\n    x.dataSource.parser.options.emptyAs = 0;\r\n\r\n    x.dataSource.parser.options.useColumnNames = true;\r\n    x.dataSource.parser.options.reverse = true;\r\n\r\n    // the following line makes value axes to be arranged vertically.\r\n    x.leftAxesContainer.layout = \"vertical\";\r\n\r\n\r\n    // 여기서부터 라이브러리의 빠른 테스트를 위해 복붙함\r\n    // uncomment this line if you want to change order of axes\r\n    //chart.bottomAxesContainer.reverseOrder = true;\r\n\r\n    let dateAxis = x.xAxes.push(new am4charts.DateAxis());\r\n    dateAxis.renderer.grid.template.location = 0;\r\n    dateAxis.renderer.ticks.template.length = 8;\r\n    dateAxis.renderer.ticks.template.strokeOpacity = 0.1;\r\n    dateAxis.renderer.grid.template.disabled = true;\r\n    dateAxis.renderer.ticks.template.disabled = false;\r\n    dateAxis.renderer.ticks.template.strokeOpacity = 0.2;\r\n    dateAxis.renderer.minLabelPosition = 0.01;\r\n    dateAxis.renderer.maxLabelPosition = 0.99;\r\n    dateAxis.keepSelection = true;\r\n    dateAxis.minHeight = 30;\r\n\r\n    dateAxis.groupData = true;\r\n    dateAxis.minZoomCount = 5;\r\n\r\n    // these two lines makes the axis to be initially zoomed-in\r\n    // dateAxis.start = 0.7;\r\n    // dateAxis.keepSelection = true;\r\n\r\n    let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\r\n    valueAxis.tooltip.disabled = true;\r\n    valueAxis.zIndex = 1;\r\n    valueAxis.renderer.baseGrid.disabled = true;\r\n    // height of axis\r\n    valueAxis.height = am4core.percent(65);\r\n\r\n    valueAxis.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\r\n    valueAxis.renderer.gridContainer.background.fillOpacity = 0.05;\r\n    valueAxis.renderer.inside = true;\r\n    valueAxis.renderer.labels.template.verticalCenter = \"bottom\";\r\n    valueAxis.renderer.labels.template.padding(1, 1, 1, 1);\r\n\r\n    //valueAxis.renderer.maxLabelPosition = 0.95;\r\n    valueAxis.renderer.fontSize = \"0.8em\"\r\n\r\n    let series = x.series.push(new am4charts.CandlestickSeries());\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.openValueY = \"open\";\r\n    series.dataFields.valueY = \"close\";\r\n    series.dataFields.lowValueY = \"low\";\r\n    series.dataFields.highValueY = \"high\";\r\n    series.clustered = false;\r\n    series.tooltipText = \"open: {openValueY.value}\\nlow: {lowValueY.value}\\nhigh: {highValueY.value}\\nclose: {valueY.value}\";\r\n    series.name = \"JSON\";\r\n    series.defaultState.transitionDuration = 0;\r\n\r\n\r\n    let valueAxis2 = x.yAxes.push(new am4charts.ValueAxis());\r\n    valueAxis2.tooltip.disabled = true;\r\n    // height of axis\r\n    valueAxis2.height = am4core.percent(35);\r\n    valueAxis2.zIndex = 3\r\n    // this makes gap between panels\r\n    valueAxis2.marginTop = 30;\r\n    valueAxis2.renderer.baseGrid.disabled = true;\r\n    valueAxis2.renderer.inside = true;\r\n    valueAxis2.renderer.labels.template.verticalCenter = \"bottom\";\r\n    valueAxis2.renderer.labels.template.padding(2, 2, 2, 2);\r\n    //valueAxis.renderer.maxLabelPosition = 0.95;\r\n    valueAxis2.renderer.fontSize = \"0.8em\"\r\n\r\n    valueAxis2.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\r\n    valueAxis2.renderer.gridContainer.background.fillOpacity = 0.05;\r\n\r\n    let series2 = x.series.push(new am4charts.ColumnSeries());\r\n    series2.dataFields.dateX = \"date\";\r\n    series2.clustered = false;\r\n    series2.dataFields.valueY = \"volume\";\r\n    series2.yAxis = valueAxis2;\r\n    series2.tooltipText = \"{valueY.value}\";\r\n    series2.name = \"Series 2\";\r\n    // volume should be summed\r\n    series2.groupFields.valueY = \"sum\";\r\n    series2.defaultState.transitionDuration = 0;\r\n\r\n    x.cursor = new am4charts.XYCursor();\r\n\r\n    let scrollbarX = new am4charts.XYChartScrollbar();\r\n\r\n    let sbSeries = x.series.push(new am4charts.LineSeries());\r\n    sbSeries.dataFields.valueY = \"close\";\r\n    sbSeries.dataFields.dateX = \"date\";\r\n    scrollbarX.series.push(sbSeries);\r\n    sbSeries.disabled = true;\r\n    scrollbarX.marginBottom = 20;\r\n    x.scrollbarX = scrollbarX;\r\n    scrollbarX.scrollbarChart.xAxes.getIndex(0).minHeight = undefined;\r\n\r\n\r\n\r\n    /**\r\n     * Set up external controls\r\n     */\r\n\r\n    // Date format to be used in input fields\r\n    let inputFieldFormat = \"yyyy-MM-dd\";\r\n\r\n    // dispose후에 버튼을 제어할려고 하니까 에러가 발생한다. document를 직접 제어하는 방법 말고 다른 방법을 써야 한다.\r\n    // document.getElementById(\"b1m\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.add(date, \"month\", -1);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"b3m\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.add(date, \"month\", -3);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"b6m\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.add(date, \"month\", -6);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"b1y\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.add(date, \"year\", -1);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"bytd\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.round(date, \"year\", 1);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"bmax\").addEventListener(\"click\", function () {\r\n    //   let min = dateAxis.groupMin[\"day1\"];\r\n    //   let date = new Date(min);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    dateAxis.events.on(\"selectionextremeschanged\", function () {\r\n      updateFields();\r\n    });\r\n\r\n    dateAxis.events.on(\"extremeschanged\", updateFields);\r\n\r\n\r\n    function updateFields() {\r\n      let minZoomed = dateAxis.minZoomed + am4core.time.getDuration(dateAxis.mainBaseInterval.timeUnit, dateAxis.mainBaseInterval.count) * 0.5;\r\n      document.getElementById(\"fromfield\").value = x.dateFormatter.format(minZoomed, inputFieldFormat);\r\n      document.getElementById(\"tofield\").value = x.dateFormatter.format(new Date(dateAxis.maxZoomed), inputFieldFormat);\r\n    };\r\n\r\n\r\n    // fromRef.current.addEventListener(\"keyup\", updateZoom)\r\n\r\n    document.getElementById(\"fromfield\").addEventListener(\"keyup\", updateZoom);\r\n    document.getElementById(\"tofield\").addEventListener(\"keyup\", updateZoom);\r\n\r\n    let zoomTimeout;\r\n    function updateZoom() {\r\n      if (zoomTimeout) {\r\n        clearTimeout(zoomTimeout);\r\n      }\r\n      zoomTimeout = setTimeout(function (e) {\r\n        let start = document.getElementById(\"fromfield\").value;\r\n        let end = document.getElementById(\"tofield\").value;\r\n        if ((start.length < inputFieldFormat.length) || (end.length < inputFieldFormat.length)) {\r\n          return;\r\n        }\r\n        let startDate = x.dateFormatter.parse(start, inputFieldFormat);\r\n        let endDate = x.dateFormatter.parse(end, inputFieldFormat);\r\n\r\n        if (startDate && endDate) {\r\n          dateAxis.zoomToDates(startDate, endDate);\r\n        }\r\n      }, 500);\r\n    };\r\n\r\n    function zoomToDates(date) {\r\n      let min = dateAxis.groupMin[\"day1\"];\r\n      let max = dateAxis.groupMax[\"day1\"];\r\n      dateAxis.keepSelection = true;\r\n      //   dateAxis.start = (date.getTime() - min)/(max - min);\r\n      //   dateAxis.end = 1;\r\n\r\n      dateAxis.zoom({ start: (date.getTime() - min) / (max - min), end: 1 });\r\n    };\r\n\r\n    chart.current = x;\r\n    // 이벤트 해제 : 해제하는 함수 등록\r\n    return () => {\r\n      x.dispose();\r\n    };\r\n    // 종목코드가 바뀌면 차트를 dispose 하도록 한다.\r\n  }, [code]);\r\n\r\n\r\n  // 현재 종목의 마지막 종가 \r\n  const getPrice = async () => {\r\n    try {\r\n      const url = `/api/daily-price/?code=${code}`;  // 배포용\r\n      const response = await axios.get(url);\r\n\r\n      const url2 = `/api/company-state/?code=${code}`\r\n      const closePrice = response.data[response.data.length - 1].close.toString()\r\n        .replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\")\r\n      setClosePrice(closePrice);\r\n\r\n      setLastUpdatePrice(response.data[response.data.length - 1].date);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  /* HTML */\r\n  return (\r\n    <div className=\"chart-div\">\r\n      {/* 기업명, 가격표시 */}\r\n      <div>\r\n        <p>\r\n          <span style={{ fontSize: '200%' }}>{compName}</span>\r\n          <span>\r\n            {code} ({lastUpdatePrice})\r\n          </span>\r\n          \r\n        </p>\r\n\r\n        <p>\r\n        <h6>[{sec_nm}]</h6>\r\n        </p>\r\n\r\n      </div>\r\n\r\n      {/* <div id=\"controls\" className=\"controls-div\"> */}\r\n      <div className=\"chart-input-div\">\r\n        기간: <input type=\"text\" id=\"fromfield\" className=\"amcharts-input\" />\r\n        ~   <input type=\"text\" id=\"tofield\" className=\"amcharts-input\" />\r\n        <span style={{ fontSize: '200%', float:\"right\"}}>{closePrice}원</span>\r\n      </div>\r\n\r\n      {/* <div className=\"chart-btns-div\">\r\n          <button id=\"b1m\" className=\"btn btn-outline-primary\">1개월</button>\r\n          <button id=\"b3m\" className=\"btn btn-outline-primary\">3개월</button>\r\n          <button id=\"b6m\" className=\"btn btn-outline-primary\">6개월</button>\r\n          <button id=\"b1y\" className=\"btn btn-outline-primary\">1년</button>\r\n          <button id=\"bytd\" className=\"btn btn-outline-primary\">연초누계</button>\r\n          <button id=\"bmax\" className=\"btn btn-outline-primary\">전체</button>\r\n        </div> */}\r\n\r\n      {/* </div> */}\r\n\r\n      {/* 차트 구현 코드 */}\r\n      <div id=\"chartdiv\" className=\"chart-candle-div\" ></div>\r\n    </div>\r\n  );\r\n};","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinancialTable.js",["93","94","95","96","97","98","99"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\n\r\n/*\r\n    1. 좌우 연도 변경 버튼\r\n    2. 연도, 수치 hover 표시\r\n    3. 적자는 빨간색으로 표시\r\n    4. 폰트 사이즈 조정 (테이블 사이즈 조정)\r\n    5. 수치가 0 이거나 0.00일 경우 N/A 처리 하기\r\n*/\r\nexport default function Tables() {\r\n    // component state\r\n    const [finData, setFinData] = useState([]);\r\n    const [deficit, setDeficit] = useState(); // 적자 체크\r\n    const [finColorState, SetFinColorState] = useState();  // 적자는 붉은색으로 표시\r\n\r\n    // 종목코드 취득\r\n    const { code, compName } = useSelector(\r\n        state => ({\r\n            code: state.searchReducer.code,\r\n            compName: state.searchReducer.comp_name,\r\n        }), shallowEqual);\r\n\r\n    useEffect(() => {\r\n        getFinYearData();\r\n    }, [code]);\r\n\r\n\r\n    /* 검색된 종목의 재무정보 취득 함수:: Hook memo 사용 검토 */\r\n    const getFinYearData = async () => {\r\n        try {\r\n            const url = `/api/company-state/?code=${code}`;  // 배포용\r\n            const response = await axios.get(url);\r\n            setFinData(response.data);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    // 억 단위 변환\r\n    const moneyFormat = (money) => {\r\n\r\n        if (isNA(money) !== \"N/A\") {\r\n            return Math.floor(money / 100000000).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n        } else {\r\n            return \"N/A\";\r\n        }\r\n    };\r\n\r\n    // N/A 판별\r\n    const isNA = (ratio) => {\r\n        if (ratio === 0 || ratio === \"0.00\") {\r\n            return \"N/A\";\r\n        } else {\r\n            return ratio;\r\n        }\r\n    };\r\n\r\n    const tooltip = () => {\r\n        return\r\n    };\r\n\r\n    /* 조건검색 테이블 변환 함수 */\r\n\r\n\r\n\r\n    // if (loading) return <div>loading...</div>;\r\n    // if (error) return <div>error.</div>;\r\n    // if (!setFinData) return null;\r\n\r\n    /* HTML */\r\n    return (\r\n        // 좌우 버튼을 두고 연도를 바꿀수 있게끔 만들어야 한다.\r\n\r\n        <div className=\"table-div\">\r\n            <div className=\"table-btns-div\">\r\n                {/* <button className=\"btn btn-primary\">이전</button>\r\n            <button className=\"btn btn-primary\">다음</button> */}\r\n            </div>\r\n\r\n            <table className=\"table table-bordered table-hover\">\r\n                <thead className=\"text-center\">\r\n                    <tr className=\"active\">\r\n                        {/* 연도 */}\r\n                        <th>투자지표</th>\r\n                        {finData.map(fin => {\r\n                            return <th key={fin.year}>{fin.year}</th>\r\n                        })}\r\n\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[수익성 지표] 최근 사업연도 50억 원 미만이면 관리종목 지정,\r\n                        2년 연속이면 상장폐지(지주회사는 연결 기준), 코스닥은 30억원 미만\">매출액(억)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.revenue < 5000000000 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {moneyFormat(fin.revenue)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[수익성 지표] 매출에서 최소한의 비용을 제거하여 남은 이익\">매출총이익(억)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.gross_profit < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {moneyFormat(fin.gross_profit)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[수익성 지표] 매출액에서 매출원가와 판매관리비등을 빼고 남은,\r\n                        순수하게 영업을 통해서 창출된 이익\">영업이익(억)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.operating_profit < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {moneyFormat(fin.operating_profit)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[수익성 지표] 기업이 한해 동안 실제로 얻게 되는 순이익(IFRS 기준 우선)\">당기순이익(억)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.net_profit < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {moneyFormat(fin.net_profit)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[성장성 지표] 전년도 대비 금년도의 매출액의 증가 비율.\r\n                        사업성 규모 성장등을 나타내므로 꾸준히 증가하는게 좋다\">매출증가율(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.sales_growth_rate < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.sales_growth_rate)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[수익성 지표] 전년도 대비 금년도의 매출총이익의 증가 비율.\r\n                        보통 40% 이상인 기업은 장기적인 경쟁우위를 가진 경우, 40%미만은 경쟁이 심한 업종에 속한 경우,\r\n                        20% 미만은 장기적인 경쟁우위를 가질수 없을 정도로 경쟁이 극심한 업종에 속한 경우다. 동종업 비교에 활용하면 좋다.\r\n                        5~10년간의 장기적인 추세 분석이 필요한 지표다\">매출총이익률(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.gross_margin < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.gross_margin)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[수익성 지표] 매출액에서 발생한 영업수익에 대한 영업이익의 비율.\r\n                        영업활동의 수익성, 판매마진을 나타낸다\">영업이익률(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.operating_margin < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.operating_margin)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[안정성 지표] 기업이 가진 자산중에 부채가 어느 정도의 비중을 차지하는지를 나타내는 비율.\r\n                        가령 부채비율이 150%라면 부채가 자본의 1.5배와 같다. 부채비율이 100%라면 자기자본과 부채가 같은 양이고,\r\n                        100%이하라면 자기자본이 부채보다 많다는 의미다\">부채비율(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.debt_ratio < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.debt_ratio)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[안정성 지표] 유동부채 대비 당좌자산의 비율로,\r\n                        제품의 판매 없이 단기에 갚아야할 부채의 지급 능력과 기업의 유동성을 나타낸다.\r\n                        일반적으로 당좌비율이 100%가 넘으면 안정적으로 현금조달을 할 수 있는 능력이 있다고 본다.\r\n                        하지만 너무 높은 수치일 경우 쌓이는 현금을 효율적으로 재투자하지 못한다는 의미로 해석할수도 있기 때문에 이는 미래 수익성을 떨어뜨리는 요인이다\">당좌비율(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.quick_ratio < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.quick_ratio)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[안정성 지표] 회사가 1년 안에 현금으로 바꿀 수 있는 유동자산을 1년 안에 갚아야할 유동부채로 나눈 값.\r\n                        통상 유동비율이 150%~200%가 넘으면 기업의 재무 상태가 안정적이라고 평가할수 있다 (매출채권 조작 유의)\">유동비율(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.current_ratio < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.current_ratio)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[성장성 지표] 전년도 대비 금년도의 당기순이익의 증가 비율.\r\n                        사업의 수익성 규모가 얼마나 성장하고 있는가를 의미한다\">당기순이익증가율(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.net_profit_growth_rate < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.net_profit_growth_rate)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[성장성 지표] 전년도 대비 금년도의 총자산 증가 비율.\r\n                        기업의 전체적인 성장추세를 측정하는 지표. 매출액 증가율과 비교하여 기업의 과대투자 여부도 간접적으로 평가할수 있다\">총자산증가율(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.asset_growth_rate < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.asset_growth_rate)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"주가수익률. 주가를 주당순이익으로 나눈것. 즉, 기업이 벌어들이는 이익에 비해 주가가 어느 정도인지를 가늠하는 지표. 동종업 기업들 기준, PER이 높다면 주당순이익에 비해 주식 가격이 높다는 것이고,\r\n                        PER이 낮다면 주당순이익에 비해 주식 가격이 낮다는 것을 의미한다.\r\n                        PER이 높다는것은 가격에 거품이 있다고도 볼 수도 있고, 주가가 높다는 것을 의미하며 그만큼 해당 종목에 투자자가 많이 몰려 있고 미래 수익에 대한 기대가 있다고도 볼 수 있으니 PER이 낮다고 해서 꼭 좋다고 할 순 없다. 영원히 저평가에 머물러 있는 기업들이 있기 때문이다. 따라서 절대적인 투자지표로 활용하기는 힘들다\">PER(배)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.per < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.per)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[수익성 지표] 주당순이익. 당기순이익을 주식수로 나눈 값.\r\n                        1 주당 1년동안 얼마나 돈을 벌어왔는지 알 수 있다. 따라서 EPS 자체가 높을수록 좋다.\r\n                        하지만 주식수가 분모이기 때문에 당기순이익이 작아도 발행한 주식수가 적다면 EPS 수치는 커지고, 당기순이익이 커도 발행한 주식수가 많다면 EPS 수치는 작아진다. 따라서 절대적인 투자지표로 활용하기 힘들다\">EPS(원)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.eps < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.eps).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[안정성 지표] 주가순자산배율. 주가를 주당 순자산으로 나눈 지표.\r\n                        당시 주가가 주당 순자산의 몇 배로 거래되고 있는지를 보여준다. PBR이 1이라면 자본총계의 가치와 시장가치가 같다는 것을 의미한다.\r\n                        PBR이 1 보다 작으면 주가보다 순자산 가치가 높다는 것을 의미한다. PBR은 기업의 순자산에 비해 주가가 적정하게 형성되었는지를 판단하는 지표다.\r\n                        PER과 마찬가지로 높고 낮음의 기준은 따로 없기 때문에 동종업계와 비교가 필수다. 미래가치가 높은 종목들은 PBR 또한 높게 측정된 경우가 많다\">PBR(배)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.pbr < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.pbr)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[안정성 지표] 주당순자산가치. 1 주당 순자산이 얼마인지를 알 수 있다.\r\n                        총자산에서 총부채를 뺀 순자산을 시중에 발행된 주식 수로 나눈 값.\r\n                        일종의 청산가치로 기업이 폐업을 해서 청산절차 이후에 1 주당 BPS만큼 주주들에게 배당을 해준다는 의미다.\r\n                        따라서 BPS는 높을수록 좋다. (한계점: 재무상 정확하게 현실을 반영하고 있는지는 불확실)\r\n                        \">BPS(원)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.bps < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(Math.ceil(fin.bps)).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[안정성 지표] 자기자본율. 총자본주 자기자본이 차지하는 비중. 50%를 초과하면 자본이 부채보다 많은 상태고 그 미만이면 자본보다 부채가 더 많은 상태다.\r\n                        통상적으로 자기자본이 부채총계보다 클 경우 재무적으로 안정되어 있다고 하므로, 자기자본비율이 50%에 가깝거나 그보다 높을수록 재무 안정성이 크다고 할 수 있다.\r\n                        비율이 커질수록 재무건정성이 커진다는 것이므로 자본의 비중을 확인할 수 있다는 장점이 있다\">BIS(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.bis < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.bis)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"총자산이익률. 자기자본에 부채까지 합친 차산 총액을 분모로 두고 계산.\r\n                        은행대출로 낸 이익까지 고려하기 때문에, 대출까지 받았지만 동일한 이익을 낸 회사의 ROA는 더 적게 나타난다.\r\n                        즉, 자기 자본이 거의 없는 기업이 과도하게 빚을 내서 투자한 경우 ROA에 반영되어 이를 판단할수 있는 지표다.\r\n                        ROA에 비해 ROE가 현저하게 높다는 것은 기업이 가지고 있는 부채가 자기자본 대비 높다는 의미로 재무건전성을 의심해볼 필요가 있다\">ROA(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.roa < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.roa)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"자기자본이익률. 기업이 자본을 이용해 얼마만큼의 이익을 냈는지 나타내는 지표.\r\n                        투자자들이 투자한 금액 대비 이익을 얼만큼 내는지를 의미한다.\r\n                        통상 ROE가 15% 이상으로 최근 3년 이내 꾸준히 증가 하는 기업일수록 좋다 (한계점: 은행 대출, 토지매각등으로 인해 창출된 이익은 반영 안됨).\r\n                        \">ROE(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.roe < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.roe)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th className=\"tooltip-graph\" title=\"[활동성 지표] 매출활동을 함에 있어 기업의 보유자산을 몇번이나 활용했는지를 측정하는 비율.\r\n                        총자산회전율이 높을수록 자산을 활용한 매출액이 높다고 할 수 있기 때문에 기업이 얼마나 효과적으로 자산을 잘 활용했는지 측정할 수 있는 지표이므로 높을수록 좋다\">총자산회전율(%)</th>\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.asset_turnover < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.asset_turnover)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n    )\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\LinkedList.js",["100"],"// LinkedList 구현\r\nexport default function LinkedList () {\r\n    this.head = new node(\"head\");\r\n    this.find = find;\r\n    this.append = append;\r\n    this.insert = insert;\r\n    this.remove = remove;\r\n    this.findPre = findPre;\r\n    this.element = element;\r\n\r\n// node 구현\r\nfunction node(data, next=null){\r\n    this.data = data;\r\n    this.next = next;\r\n};\r\n\r\n// 노드 찾기\r\nfunction find (item) {\r\n    let currNode = this.head;\r\n    while (currNode.data !== item) {\r\n        currNode = currNode.next;\r\n    }\r\n    return currNode;\r\n};\r\n\r\n// 이전 노드 찾기\r\nfunction findPre (item) {\r\n    let currNode = this.head;\r\n    while (currNode.next != null && currNode.next.data != item) {\r\n        currNode = currNode.next;\r\n    }\r\n    return currNode;\r\n};\r\n\r\n// 노드 추가\r\nfunction append (newData) {\r\n    let newNode = new node(newData);  // 새로운 노드 생성\r\n    let current = this.head;  // 시작 노드\r\n    while (current.next != null) {  // 맨 끝 노드 찾기\r\n        current = current.next;\r\n    }\r\n    current.next = newNode;\r\n};\r\n\r\n// 노드 중간 삽입\r\nfunction insert (newData, item) {\r\n    let newNode = new node(newData);  // 새로운 노드 생성\r\n    let current = this.find(item);  // 삽입할 위치의 노드 찾기\r\n    newNode.next = current.next;  // 찾은 노드가 가리키는 노드를 새로운 노드가 가리키기\r\n    current.next = newNode;  // 찾은 노드는 이제부터 새로운 노드를 가리키도록 하기\r\n};\r\n\r\n// 노드 삭제\r\nfunction remove (item) {\r\n    let preNode = this.findPre(item);  // 삭제할 노드를 가리키는 노드 찾기\r\n    preNode.next = preNode.next.next;  // 삭제할 노드 다음 노드를 가리키도록 하기\r\n};\r\n\r\n// 연결 리스트의 요소들을 출력 \r\nfunction element () {\r\n    let data = [];\r\n    let currNode = this.head;\r\n    while (currNode.next != null) {\r\n        data.push(currNode.next.data);\r\n        currNode = currNode.next;\r\n    };\r\n    return data;\r\n};\r\n};\r\n\r\n",["101","102"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinSearchTable.js",["103","104","105"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useDispatch } from 'react-redux';\r\nimport { companyInfoActionObject } from '../modules/SearchReducer';\r\n/*\r\n    1. 검색 결과를 resultHTML로 넘기기 (상태를 이용?) : 완료\r\n    2. conditionHTML과 resultHTML간의 스위칭 구조 구현\r\n    3. resultHTML 디자인 하기 \r\n    4. 주소창에 쿼리스트링이 표시되는 문제 파악하고 해결하기\r\n    5. 종목을 클릭하면 해당 종목을 검색, 주가차트 표시\r\n*/\r\nexport default function FinSearchTable() {\r\n    // 조건검사 결과 데이터\r\n    const [resultData, setResultData] = useState();\r\n    const [changeResultHTML, setChangeResultHTML] = useState(false);  // 결과 테이블 HTML 출력\r\n    const [conditionArr, setConditionArr] = useState();  // 입력한 조건들만 저장하는 변수\r\n\r\n    const dispatch = useDispatch();\r\n    // rootQuery\r\n    // const rootQueryString = `http://localhost:8000/api/company-state/`;  // 개발용\r\n    const rootQueryString = `/api/company-state/`  // 배포용\r\n\r\n\r\n    // conditionHTML의 form의 input값들을 쿼리스트링으로 변환및 결과값을 set하는 함수\r\n    const handleForm = async (e) => {\r\n        try {\r\n            // 조건검색 쿼리 : 무식하게 코딩함. 유지보수가 더 쉽고 효율적인 코드로 바꿔야함\r\n            const data = new FormData(e.target);\r\n\r\n            const finQueryStr = `${rootQueryString}?year=2020\r\n            &min_revenue=${data.get('min_revenue').length === 0 ? '' : data.get('min_revenue') * 100000000}\r\n            &max_revenue=${data.get('max_revenue').length === 0 ? '' : data.get('max_revenue') * 100000000}\r\n            &min_gross_profit=${data.get('min_gross_profit').length === 0 ? '' : data.get('min_gross_profit') * 100000000}\r\n            &max_gross_profit=${data.get('max_gross_profit').length === 0 ? '' : data.get('max_gross_profit') * 100000000}\r\n            &min_operating_profit=${data.get('min_operating_profit').length === 0 ? '' : data.get('min_operating_profit') * 100000000}\r\n            &max_operating_profit=${data.get('max_operating_profit').length === 0 ? '' : data.get('max_operating_profit') * 100000000}\r\n            &min_net_profit=${data.get('min_net_profit').length === 0 ? '' : data.get('min_net_profit') * 100000000}\r\n            &max_net_profit=${data.get('max_net_profit').length === 0 ? '' : data.get('max_net_profit') * 100000000}\r\n            &min_sales_growth_rate=${data.get('min_sales_growth_rate')}&max_sales_growth_rate=${data.get('max_sales_growth_rate')}\r\n            &min_gross_margin=${data.get('min_gross_margin')}&max_gross_margin=${data.get('max_gross_margin')}\r\n            &min_operating_margin=${data.get('min_operating_margin')}&max_operating_margin=${data.get('max_operating_margin')}\r\n            &min_debt_ratio=${data.get('min_debt_ratio')}&max_debt_ratio=${data.get('max_debt_ratio')}\r\n            &min_quick_ratio=${data.get('min_quick_ratio')}&max_quick_ratio=${data.get('max_quick_ratio')}\r\n            &min_current_ratio=${data.get('min_current_ratio')}&max_current_ratio=${data.get('max_current_ratio')}\r\n            &min_net_profit_growth_rate=${data.get('min_net_profit_growth_rate')}&max_net_profit_growth_rate=${data.get('max_net_profit_growth_rate')}\r\n            &min_asset_growth_rate=${data.get('min_asset_growth_rate')}&max_asset_growth_rate=${data.get('max_asset_growth_rate')}\r\n            &min_per=${data.get('min_per')}&max_per=${data.get('max_per')}\r\n            &min_eps=${data.get('min_eps')}&max_eps=${data.get('max_eps')}\r\n            &min_pbr=${data.get('min_pbr')}&max_pbr=${data.get('max_pbr')}\r\n            &min_bps=${data.get('min_bps')}&max_bps=${data.get('max_bps')}\r\n            &min_bis=${data.get('min_bis')}&max_bis=${data.get('max_bis')}\r\n            &min_roa=${data.get('min_roa')}&max_roa=${data.get('max_roa')}\r\n            &min_roe=${data.get('min_roe')}&max_roe=${data.get('max_roe')}\r\n            &min_asset_turnover=${data.get('min_asset_turnover')}\r\n            &max_asset_turnover=${data.get('max_asset_turnover')}`;\r\n\r\n            // 가격(종가) 검색 쿼리: 조건 검색되어 나온 기업명, 종목코드와 가격조건에 검색된 기업명과 종목코드를 대조하여 일치하는 기업명만 표시하면 가격조건도 포함시킬수 있다.\r\n            const priceQueryStr = ``;\r\n\r\n            const response = await axios.get(finQueryStr.replace(/(\\s*)/g, \"\"));  // 공백문자 제거\r\n\r\n            // 결과값을 상태 저장\r\n            setResultData(response.data);\r\n\r\n            // 결과값을 모두 받아오면 ResultHTML로 상태 변경\r\n            setChangeResultHTML(true);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n\r\n    };\r\n\r\n    // 재검색 버튼 클릭 상태 변화 함수\r\n    const onClickedStateChange = () => {\r\n        setChangeResultHTML(false);\r\n    };\r\n\r\n    /* 조건검색 form HTML */\r\n    const conditionHTML = () => {\r\n\r\n        return (\r\n            <div>\r\n                (2020년 기준)\r\n                <form name=\"conditions\" id=\"conditions\" onSubmit={e => {\r\n                    e.preventDefault();\r\n                    handleForm(e);\r\n                }}>\r\n\r\n                    <input type=\"hidden\" name=\"year\" value=\"2020\" />\r\n                    <table className=\"table table-bordered table-hover\">\r\n\r\n                        <thead className=\"text-center\">\r\n                            <tr>\r\n                                {/* 검색버튼을 누르거나 엔터로 검색을 하면 resultHTML을 표시하도록 제어한다. */}\r\n                                <th><button className=\"btn btn-outline-primary btn-sm\" type=\"submit\">검색</button></th>\r\n                                <th>최소</th>\r\n                                <th>최대</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody className=\"text-center\">\r\n                            <tr>\r\n                                {/*  */}\r\n                                <th className=\"tooltip-graph\" title=\"[수익성 지표] 최근 사업연도 50억 원 미만이면 관리종목 지정,\r\n                                2년 연속이면 상장폐지(지주회사는 연결 기준), 코스닥은 30억원 미만\">매출액(억)</th>\r\n                                <th><input type=\"number\" name=\"min_revenue\" /></th>\r\n                                <th><input type=\"number\" name=\"max_revenue\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[수익성 지표] 매출에서 최소한의 비용을 제거하여 남은 이익\">매출총이익(억)</th>\r\n                                <th><input type=\"number\" name=\"min_gross_profit\" /></th>\r\n                                <th><input type=\"number\" name=\"max_gross_profit\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[수익성 지표] 매출액에서 매출원가와 판매관리비등을 빼고 남은,\r\n                                순수하게 영업을 통해서 창출된 이익\">영업이익(억)</th>\r\n                                <th><input type=\"number\" name=\"min_operating_profit\" /></th>\r\n                                <th><input type=\"number\" name=\"max_operating_profit\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[수익성 지표] 기업이 한해 동안 실제로 얻게 되는 순이익(IFRS 기준 우선)\">당기순이익(억)</th>\r\n                                <th><input type=\"number\" name=\"min_net_profit\" /></th>\r\n                                <th><input type=\"number\" name=\"max_net_profit\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[성장성 지표] 전년도 대비 금년도의 매출액의 증가 비율.\r\n                                사업성 규모 성장등을 나타내므로 꾸준히 증가하는게 좋다\">매출증가율(%)</th>\r\n                                <th><input type=\"number\" name=\"min_sales_growth_rate\" /></th>\r\n                                <th><input type=\"number\" name=\"max_sales_growth_rate\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[수익성 지표] 전년도 대비 금년도의 매출총이익의 증가 비율.\r\n                                보통 40% 이상인 기업은 장기적인 경쟁우위를 가진 경우, 40%미만은 경쟁이 심한 업종에 속한 경우,\r\n                                20% 미만은 장기적인 경쟁우위를 가질수 없을 정도로 경쟁이 극심한 업종에 속한 경우다. 동종업 비교에 활용하면 좋다.\r\n                                5~10년간의 장기적인 추세 분석이 필요한 지표다\">매출이익률(%)</th>\r\n                                <th><input type=\"number\" name=\"min_gross_margin\" /></th>\r\n                                <th><input type=\"number\" name=\"max_gross_margin\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[수익성 지표] 매출액에서 발생한 영업수익에 대한 영업이익의 비율.\r\n                                영업활동의 수익성, 판매마진을 나타낸다\">영업이익률(%)</th>\r\n                                <th><input type=\"number\" name=\"min_operating_margin\" /></th>\r\n                                <th><input type=\"number\" name=\"max_operating_margin\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[안정성 지표] 기업이 가진 자산중에 부채가 어느 정도의 비중을 차지하는지를 나타내는 비율.\r\n                                가령 부채비율이 150%라면 부채가 자본의 1.5배와 같다. 부채비율이 100%라면 자기자본과 부채가 같은 양이고,\r\n                                100%이하라면 자기자본이 부채보다 많다는 의미다\">부채비율(%)</th>\r\n                                <th><input type=\"number\" name=\"min_debt_ratio\" /></th>\r\n                                <th><input type=\"number\" name=\"max_debt_ratio\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[안정성 지표] 유동부채 대비 당좌자산의 비율로,\r\n                                제품의 판매 없이 단기에 갚아야할 부채의 지급 능력과 기업의 유동성을 나타낸다.\r\n                                일반적으로 당좌비율이 100%가 넘으면 안정적으로 현금조달을 할 수 있는 능력이 있다고 본다.\r\n                                하지만 너무 높은 수치일 경우 쌓이는 현금을 효율적으로 재투자하지 못한다는 의미로 해석할수도 있기 때문에 이는 미래 수익성을 떨어뜨리는 요인이다\">당좌비율(%)</th>\r\n                                <th><input type=\"number\" name=\"min_quick_ratio\" /></th>\r\n                                <th><input type=\"number\" name=\"max_quick_ratio\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[안정성 지표] 회사가 1년 안에 현금으로 바꿀 수 있는 유동자산을 1년 안에 갚아야할 유동부채로 나눈 값.\r\n                                통상 유동비율이 150%~200%가 넘으면 기업의 재무 상태가 안정적이라고 평가할수 있다 (매출채권 조작 유의\">유동비율(%)</th>\r\n                                <th><input type=\"number\" name=\"min_current_ratio\" /></th>\r\n                                <th><input type=\"number\" name=\"max_current_ratio\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[성장성 지표] 전년도 대비 금년도의 당기순이익의 증가 비율.\r\n                                사업의 수익성 규모가 얼마나 성장하고 있는가를 의미한다\">순이익증가율(%)</th>\r\n                                <th><input type=\"number\" name=\"min_net_profit_growth_rate\" /></th>\r\n                                <th><input type=\"number\" name=\"max_net_profit_growth_rate\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[성장성 지표] 전년도 대비 금년도의 총자산 증가 비율.\r\n                                기업의 전체적인 성장추세를 측정하는 지표. 매출액 증가율과 비교하여 기업의 과대투자 여부도 간접적으로 평가할수 있다\">총자산증가율(%)</th>\r\n                                <th><input type=\"number\" name=\"min_asset_growth_rate\" /></th>\r\n                                <th><input type=\"number\" name=\"max_asset_growth_rate\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"주가수익률. 주가를 주당순이익으로 나눈것. 즉, 기업이 벌어들이는 이익에 비해 주가가 어느 정도인지를 가늠하는 지표. 동종업 기업들 기준, PER이 높다면 주당순이익에 비해 주식 가격이 높다는 것이고,\r\n                                PER이 낮다면 주당순이익에 비해 주식 가격이 낮다는 것을 의미한다.\r\n                                PER이 높다는것은 가격에 거품이 있다고도 볼 수도 있고, 주가가 높다는 것을 의미하며 그만큼 해당 종목에 투자자가 많이 몰려 있고 미래 수익에 대한 기대가 있다고도 볼 수 있으니 PER이 낮다고 해서 꼭 좋다고 할 순 없다. 영원히 저평가에 머물러 있는 기업들이 있기 때문이다. 따라서 절대적인 투자지표로 활용하기는 힘들다\">PER(배)</th>\r\n                                <th><input type=\"number\" name=\"min_per\" /></th>\r\n                                <th><input type=\"number\" name=\"max_per\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[수익성 지표] 주당순이익. 당기순이익을 주식수로 나눈 값.\r\n                                1 주당 1년동안 얼마나 돈을 벌어왔는지 알 수 있다. 따라서 EPS 자체가 높을수록 좋다.\r\n                                하지만 주식수가 분모이기 때문에 당기순이익이 작아도 발행한 주식수가 적다면 EPS 수치는 커지고, 당기순이익이 커도 발행한 주식수가 많다면 EPS 수치는 작아진다. 따라서 절대적인 투자지표로 활용하기 힘들다\">EPS(원)</th>\r\n                                <th><input type=\"number\" name=\"min_eps\" /></th>\r\n                                <th><input type=\"number\" name=\"max_eps\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[안정성 지표] 주가순자산배율. 주가를 주당 순자산으로 나눈 지표.\r\n                                당시 주가가 주당 순자산의 몇 배로 거래되고 있는지를 보여준다. PBR이 1이라면 자본총계의 가치와 시장가치가 같다는 것을 의미한다.\r\n                                PBR이 1 보다 작으면 주가보다 순자산 가치가 높다는 것을 의미한다. PBR은 기업의 순자산에 비해 주가가 적정하게 형성되었는지를 판단하는 지표다.\r\n                                PER과 마찬가지로 높고 낮음의 기준은 따로 없기 때문에 동종업계와 비교가 필수다. 미래가치가 높은 종목들은 PBR 또한 높게 측정된 경우가 많다\">PBR(배)</th>\r\n                                <th><input type=\"number\" name=\"min_pbr\" /></th>\r\n                                <th><input type=\"number\" name=\"max_pbr\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[안정성 지표] 주당순자산가치. 1 주당 순자산이 얼마인지를 알 수 있다.\r\n                                총자산에서 총부채를 뺀 순자산을 시중에 발행된 주식 수로 나눈 값.\r\n                                일종의 청산가치로 기업이 폐업을 해서 청산절차 이후에 1 주당 BPS만큼 주주들에게 배당을 해준다는 의미다.\r\n                                따라서 BPS는 높을수록 좋다. (한계점: 재무상 정확하게 현실을 반영하고 있는지는 불확실)\r\n                        \">BPS(원)</th>\r\n                                <th><input type=\"number\" name=\"min_bps\" /></th>\r\n                                <th><input type=\"number\" name=\"max_bps\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[안정성 지표] 자기자본율. 총자본주 자기자본이 차지하는 비중. 50%를 초과하면 자본이 부채보다 많은 상태고 그 미만이면 자본보다 부채가 더 많은 상태다.\r\n                                통상적으로 자기자본이 부채총계보다 클 경우 재무적으로 안정되어 있다고 하므로, 자기자본비율이 50%에 가깝거나 그보다 높을수록 재무 안정성이 크다고 할 수 있다.\r\n                                비율이 커질수록 재무건정성이 커진다는 것이므로 자본의 비중을 확인할 수 있다는 장점이 있다\">BIS(%)</th>\r\n                                <th><input type=\"number\" name=\"min_bis\" /></th>\r\n                                <th><input type=\"number\" name=\"max_bis\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"총자산이익률. 자기자본에 부채까지 합친 차산 총액을 분모로 두고 계산.\r\n                                은행대출로 낸 이익까지 고려하기 때문에, 대출까지 받았지만 동일한 이익을 낸 회사의 ROA는 더 적게 나타난다.\r\n                                즉, 자기 자본이 거의 없는 기업이 과도하게 빚을 내서 투자한 경우 ROA에 반영되어 이를 판단할수 있는 지표다.\r\n                                ROA에 비해 ROE가 현저하게 높다는 것은 기업이 가지고 있는 부채가 자기자본 대비 높다는 의미로 재무건전성을 의심해볼 필요가 있다\">ROA(%)</th>\r\n                                <th><input type=\"number\" name=\"min_roa\" /></th>\r\n                                <th><input type=\"number\" name=\"max_roa\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"자기자본이익률. 기업이 자본을 이용해 얼마만큼의 이익을 냈는지 나타내는 지표.\r\n                                투자자들이 투자한 금액 대비 이익을 얼만큼 내는지를 의미한다.\r\n                                통상 ROE가 15% 이상으로 최근 3년 이내 꾸준히 증가 하는 기업일수록 좋다 (한계점: 은행 대출, 토지매각등으로 인해 창출된 이익은 반영 안됨).\r\n                        \">ROE(%)</th>\r\n                                <th><input type=\"number\" name=\"min_roe\" /></th>\r\n                                <th><input type=\"number\" name=\"max_roe\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th className=\"tooltip-graph\" title=\"[활동성 지표] 매출활동을 함에 있어 기업의 보유자산을 몇번이나 활용했는지를 측정하는 비율.\r\n                                총자산회전율이 높을수록 자산을 활용한 매출액이 높다고 할 수 있기 때문에 기업이 얼마나 효과적으로 자산을 잘 활용했는지 측정할 수 있는 지표이므로 높을수록 좋다\">자산회전율(%)</th>\r\n                                <th><input type=\"number\" name=\"min_asset_turnover\" /></th>\r\n                                <th><input type=\"number\" name=\"max_asset_turnover\" /></th>\r\n                            </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </form>\r\n            </div>\r\n        );\r\n    };\r\n\r\n\r\n    /* 검색된 결과를 표시하는 HTML  */\r\n    const resultHTML = () => {\r\n        // 스크롤이 가능한 테이블이여야 한다. 또는 테이블과 비슷한 구조여야 한다.\r\n        // 재검색 버튼 만들기: 클릭하면 다시 conditionHTML로 넘어간다.\r\n        // 입력한 조건의 지표들만 표시\r\n        // 결과가 없을경우 화면 표시\r\n        if (resultData.length > 0) {\r\n            return (\r\n                <div className=\"fixed-table-container\">\r\n                    (2020년 기준)\r\n                    <div className=\"fixed-table-body\">\r\n                        <table className=\"table table-bordered table-hover table-responsive-md\">\r\n                            <thead className=\"text-center\">\r\n                                <tr>\r\n                                    <th scope=\"col\"><button className=\"btn btn-outline-primary btn-sm\" onClick={onClickedStateChange}>재검색</button></th>\r\n                                    <th scope=\"col\">종목명 ({resultData.length}개)</th>\r\n                                    {/* 입력한 조건의 투자지표만 표시 */}\r\n                                    {/* <th>지표</th> */}\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody className=\"text-center\">\r\n                                {resultData.map(data => {\r\n                                    return (\r\n                                        // 클릭시 해당 종목 검색\r\n                                        <tr className=\"trow\" key={data.code} tyep=\"button\" onClick={() => { dispatch(companyInfoActionObject(data.code, data.company_nm, data.sec_nm)); }}>\r\n                                            <th>{/* 실적보기 버튼 만들어서 관련종목의 검색한 연도의 실적표를 팝업으로 띄우기 */}</th>\r\n                                            <td>\r\n                                                <div>\r\n                                                    <b>{data.company_nm}</b>\r\n                                                </div>\r\n                                                <div>\r\n                                                    [{data.sec_nm}]\r\n                                                </div>\r\n\r\n                                            </td>\r\n                                            {/* 입력한 조건의 투자지표만 표시 */}\r\n                                            {/* <td>\r\n                                                {data.current_ratio}\r\n                                            </td> */}\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        /* 결과값 없음 */\r\n        else {\r\n            return (\r\n                <div>\r\n                    <div className=\"fixed-table-body\">\r\n                        <table className=\"table table-bordered table-hover\">\r\n                            <thead className=\"text-center\">\r\n                                <tr>\r\n                                    <th><button className=\"btn btn-outline-primary\" onClick={onClickedStateChange}>재검색</button></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody className=\"text-center\">\r\n                                <tr>\r\n                                    <th>\r\n                                        조건에 맞는 검색 결과가 없습니다.\r\n                                    </th>\r\n\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /* HTML */\r\n    return (\r\n        <div className=\"table-div\">\r\n            {/* 테이블 전체를 jsx 방식으로 대체한다. */}\r\n            {changeResultHTML ? resultHTML() : conditionHTML()}\r\n        </div>\r\n    )\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\RootReducer.ts",[],["106","107"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\SearchReducer.ts",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\store\\index.ts",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NavBar.tsx",["108","109"],"import React from \"react\";\r\nimport axios from 'axios';\r\nimport { companyInfoActionObject } from '../modules/SearchReducer';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// 리덕스를 사용해서 검색한 종목코드 또는 종목명 데이터를 넘겨야 겠다.\r\n// 코스피, 코스닥, 금리, VIX 지수를 실시간 확인할수 있도록 기능을 넣어야한다.\r\n\r\n/*\r\n  1. 검색어 미리보기 기능 \r\n     (종목 리스트를 모두 로드하고 정규식이든 뭐든 써서 사용자 타이핑을 감시하고 부분일치 리스트를 모두 보여주면 되지 않을까?)\r\n*/ \r\n\r\nexport default function TitelBar () {\r\n    const dispatch = useDispatch();\r\n    \r\n    const getCompanyInfo = async(e) => {\r\n        try{\r\n            e.preventDefault();  // 페이지 새로고침 막기\r\n            const keyword = e.target.keyword.value;\r\n\r\n            // keyword가 int인지 string 인지 분기 처리\r\n            if (isNaN(keyword)) {\r\n                // 종목명일 경우 (true)\r\n                const url = `/api/company-state/?company_nm=${keyword}`;  // 배포용\r\n                const request = await axios.get(url);\r\n                const code = request.data[0].code;\r\n                const sec_nm = request.data[0].sec_nm;\r\n\r\n                // 리덕스 전달\r\n                dispatch(companyInfoActionObject(code, keyword, sec_nm));\r\n            }else {\r\n                // 종목코드일 경우 (false)\r\n                const url = `/api/company-state/?code=${keyword}`;  // 배포용\r\n                const request = await axios.get(url);\r\n                const comp_nm = request.data[0].company_nm;\r\n                const sec_nm = request.data[0].sec_nm;\r\n\r\n                // 리덕스 전달\r\n                dispatch(companyInfoActionObject(keyword,comp_nm, sec_nm));\r\n            }\r\n\r\n        } catch (error) {\r\n            // 검색이 되지 않았을 경우, 간단한 알림 띄우기(은은하게 떳다 사라지는게 좋을거 같음)\r\n            console.error(error);\r\n            return (\r\n                alert('검색 결과가 없습니다.')\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\" >\r\n                <a href=\"#\" className=\"navbar-brand\">STOCKMAN</a>\r\n\r\n                {/* search bar */}\r\n                <ul className=\"navbar-nav me-auto mt-md-0 \">\r\n                    <li className=\"nav-item hidden-sm-down\">\r\n                        <form className=\"app-search ps-3\" onSubmit={getCompanyInfo}>\r\n                            <input type=\"text\" name='keyword' className=\"form-control\" placeholder=\"종목검색\"/> \r\n                                <a className=\"srh-btn\">\r\n                                    <i className=\"ti-search\">\r\n                                        {/* 검색 */}\r\n                                    </i>\r\n                                </a>\r\n                        </form>\r\n                    </li>\r\n                </ul>\r\n\r\n                <div className=\"me-auto navbar-nav\">\r\n                    {/* <a href=\"#home\" data-rb-event-key=\"#home\" className=\"nav-link active\">Home</a>\r\n                    <a href=\"#features\" data-rb-event-key=\"#features\" className=\"nav-link\">Features</a>\r\n                    <a href=\"#pricing\" data-rb-event-key=\"#pricing\" className=\"nav-link\">Pricing</a> */}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NotFound.tsx",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"110","replacedBy":"114"},{"ruleId":"112","replacedBy":"115"},{"ruleId":"110","replacedBy":"116"},{"ruleId":"112","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":1,"column":27,"nodeType":"120","messageId":"121","endLine":1,"endColumn":36},{"ruleId":"118","severity":1,"message":"122","line":26,"column":12,"nodeType":"120","messageId":"121","endLine":26,"endColumn":18},{"ruleId":"118","severity":1,"message":"123","line":26,"column":20,"nodeType":"120","messageId":"121","endLine":26,"endColumn":29},{"ruleId":"118","severity":1,"message":"124","line":34,"column":13,"nodeType":"120","messageId":"121","endLine":34,"endColumn":17},{"ruleId":"118","severity":1,"message":"125","line":34,"column":19,"nodeType":"120","messageId":"121","endLine":34,"endColumn":27},{"ruleId":"118","severity":1,"message":"126","line":4,"column":5,"nodeType":"120","messageId":"121","endLine":4,"endColumn":9},{"ruleId":"118","severity":1,"message":"127","line":21,"column":10,"nodeType":"120","messageId":"121","endLine":21,"endColumn":13},{"ruleId":"118","severity":1,"message":"128","line":21,"column":15,"nodeType":"120","messageId":"121","endLine":21,"endColumn":21},{"ruleId":"118","severity":1,"message":"129","line":244,"column":14,"nodeType":"120","messageId":"121","endLine":244,"endColumn":25},{"ruleId":"130","severity":1,"message":"131","line":260,"column":6,"nodeType":"132","endLine":260,"endColumn":12,"suggestions":"133"},{"ruleId":"118","severity":1,"message":"134","line":269,"column":13,"nodeType":"120","messageId":"121","endLine":269,"endColumn":17},{"ruleId":"118","severity":1,"message":"135","line":15,"column":12,"nodeType":"120","messageId":"121","endLine":15,"endColumn":19},{"ruleId":"118","severity":1,"message":"136","line":15,"column":21,"nodeType":"120","messageId":"121","endLine":15,"endColumn":31},{"ruleId":"118","severity":1,"message":"137","line":16,"column":12,"nodeType":"120","messageId":"121","endLine":16,"endColumn":25},{"ruleId":"118","severity":1,"message":"138","line":16,"column":27,"nodeType":"120","messageId":"121","endLine":16,"endColumn":43},{"ruleId":"118","severity":1,"message":"125","line":19,"column":19,"nodeType":"120","messageId":"121","endLine":19,"endColumn":27},{"ruleId":"130","severity":1,"message":"139","line":27,"column":8,"nodeType":"132","endLine":27,"endColumn":14,"suggestions":"140"},{"ruleId":"118","severity":1,"message":"141","line":60,"column":11,"nodeType":"120","messageId":"121","endLine":60,"endColumn":18},{"ruleId":"142","severity":1,"message":"143","line":29,"column":56,"nodeType":"144","messageId":"145","endLine":29,"endColumn":58},{"ruleId":"110","replacedBy":"146"},{"ruleId":"112","replacedBy":"147"},{"ruleId":"118","severity":1,"message":"148","line":16,"column":12,"nodeType":"120","messageId":"121","endLine":16,"endColumn":24},{"ruleId":"118","severity":1,"message":"149","line":16,"column":26,"nodeType":"120","messageId":"121","endLine":16,"endColumn":41},{"ruleId":"118","severity":1,"message":"150","line":58,"column":19,"nodeType":"120","messageId":"121","endLine":58,"endColumn":32},{"ruleId":"110","replacedBy":"116"},{"ruleId":"112","replacedBy":"117"},{"ruleId":"151","severity":1,"message":"152","line":55,"column":17,"nodeType":"153","endLine":55,"endColumn":54},{"ruleId":"151","severity":1,"message":"154","line":62,"column":33,"nodeType":"153","endLine":62,"endColumn":56},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],["155"],["156"],["155"],["156"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'result' is assigned a value but never used.","'setResult' is assigned a value but never used.","'code' is assigned a value but never used.","'compName' is assigned a value but never used.","'Link' is defined but never used.","'sec' is assigned a value but never used.","'setSec' is assigned a value but never used.","'zoomToDates' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPrice'. Either include it or remove the dependency array.","ArrayExpression",["157"],"'url2' is assigned a value but never used.","'deficit' is assigned a value but never used.","'setDeficit' is assigned a value but never used.","'finColorState' is assigned a value but never used.","'SetFinColorState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFinYearData'. Either include it or remove the dependency array.",["158"],"'tooltip' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["155"],["156"],"'conditionArr' is assigned a value but never used.","'setConditionArr' is assigned a value but never used.","'priceQueryStr' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [code, getPrice]",{"range":"163","text":"164"},"Update the dependencies array to be: [code, getFinYearData]",{"range":"165","text":"166"},[9274,9280],"[code, getPrice]",[793,799],"[code, getFinYearData]"]