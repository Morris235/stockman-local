[{"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\Button.js":"1","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\BoardInputForm.js":"2","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Router.js":"3","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Chart.js":"4","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinancialTable.js":"5","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinSearchTable.js":"6","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\index.js":"7","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Tooltip.js":"8","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\store\\index.js":"9","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\RootReducer.js":"10","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NotFound.js":"11","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Home.js":"12","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Counter.js":"13","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\SearchReducer.js":"14","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NavBar.js":"15"},{"size":719,"mtime":1616582396855,"results":"16","hashOfConfig":"17"},{"size":1193,"mtime":1625029349568,"results":"18","hashOfConfig":"19"},{"size":1311,"mtime":1628326430522,"results":"20","hashOfConfig":"21"},{"size":11883,"mtime":1628326745454,"results":"22","hashOfConfig":"21"},{"size":14159,"mtime":1628325666599,"results":"23","hashOfConfig":"21"},{"size":18421,"mtime":1628325210825,"results":"24","hashOfConfig":"21"},{"size":1523,"mtime":1628326384444,"results":"25","hashOfConfig":"21"},{"size":12124,"mtime":1628332528992,"results":"26","hashOfConfig":"21"},{"size":235,"mtime":1628331080108,"results":"27","hashOfConfig":"21"},{"size":1136,"mtime":1628330972651,"results":"28","hashOfConfig":"21"},{"size":270,"mtime":1628330810533,"results":"29","hashOfConfig":"21"},{"size":8828,"mtime":1628330932577,"results":"30","hashOfConfig":"21"},{"size":2929,"mtime":1628330830472,"results":"31","hashOfConfig":"21"},{"size":1097,"mtime":1628330897839,"results":"32","hashOfConfig":"21"},{"size":3492,"mtime":1628330819513,"results":"33","hashOfConfig":"21"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"zefywn",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"130xh85",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1uacwk4",{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\Button.js",[],["70","71"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\BoardInputForm.js",[],["72","73"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Router.js",[],["74","75"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Chart.js",["76","77","78","79","80","81"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { RootState } from '../modules/RootReducer';\r\n\r\n/*\r\n  1. 디스포즈 구현 (DOM 제어 에러 발생)\r\n  2. 성능 최적화 (느림)\r\n  3. UI 꾸미기 (버튼, from, to input 상자, 캔들 색상)\r\n  4. 수정주가 계산및 구현\r\n  5. 이동평균선, MACD, 추세선등등 기능 확장\r\n*/\r\n\r\nexport default function Charts() {\r\n  const chart = useRef(null);\r\n  // 현재 선택한 종목의 종가\r\n  const [closePrice, setClosePrice] = useState();\r\n  const [lastUpdatePrice, setLastUpdatePrice] = useState();\r\n  const [sec, setSec] = useState();\r\n  // useRef\r\n\r\n  // 종목코드 상태 참조\r\n  const { code, compName, sec_nm } = useSelector(\r\n    (state) => ({\r\n      code: state.searchReducer.code,\r\n      compName: state.searchReducer.comp_name,\r\n      sec_nm: state.searchReducer.sec_nm,\r\n    }), shallowEqual);\r\n\r\n  // 라이프 사이클을 고려하지 않으면 새로고침할때 2개의 차트가 생겨버린다. \r\n  // 따라서 코딩 당시 판단으로 useEffect에 차트 코드를 넣을수 밖에 없었음\r\n  useEffect(() => {\r\n    // CandleChart();\r\n    getPrice();\r\n    /* Chart code */\r\n    // Themes begin\r\n    am4core.useTheme(am4themes_animated);\r\n    //Themes end\r\n\r\n    // Create chart \r\n    let x = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n    x.padding(0, 15, 0, 15);\r\n\r\n    /* 데이터를 취득하지 못했던 이유: \r\n       1. 쿼리스트링 오타 => code를 id로 표시함\r\n       2. 백엔드에서 페이징을 걸어버려서 JSON 형식이 amcharts4가 읽지 못하는 형식이 되버림\r\n    */\r\n    x.dataSource.url = `/api/daily-price/?code=${code}`;  // 배포용\r\n\r\n    x.dataSource.parser = new am4core.JSONParser();\r\n    x.dataSource.parser.options.emptyAs = 0;\r\n\r\n    x.dataSource.parser.options.useColumnNames = true;\r\n    x.dataSource.parser.options.reverse = true;\r\n\r\n    // the following line makes value axes to be arranged vertically.\r\n    x.leftAxesContainer.layout = \"vertical\";\r\n\r\n\r\n    // 여기서부터 라이브러리의 빠른 테스트를 위해 복붙함\r\n    // uncomment this line if you want to change order of axes\r\n    //chart.bottomAxesContainer.reverseOrder = true;\r\n\r\n    let dateAxis = x.xAxes.push(new am4charts.DateAxis());\r\n    dateAxis.renderer.grid.template.location = 0;\r\n    dateAxis.renderer.ticks.template.length = 8;\r\n    dateAxis.renderer.ticks.template.strokeOpacity = 0.1;\r\n    dateAxis.renderer.grid.template.disabled = true;\r\n    dateAxis.renderer.ticks.template.disabled = false;\r\n    dateAxis.renderer.ticks.template.strokeOpacity = 0.2;\r\n    dateAxis.renderer.minLabelPosition = 0.01;\r\n    dateAxis.renderer.maxLabelPosition = 0.99;\r\n    dateAxis.keepSelection = true;\r\n    dateAxis.minHeight = 30;\r\n\r\n    dateAxis.groupData = true;\r\n    dateAxis.minZoomCount = 5;\r\n\r\n    // these two lines makes the axis to be initially zoomed-in\r\n    // dateAxis.start = 0.7;\r\n    // dateAxis.keepSelection = true;\r\n\r\n    let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\r\n    valueAxis.tooltip.disabled = true;\r\n    valueAxis.zIndex = 1;\r\n    valueAxis.renderer.baseGrid.disabled = true;\r\n    // height of axis\r\n    valueAxis.height = am4core.percent(65);\r\n\r\n    valueAxis.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\r\n    valueAxis.renderer.gridContainer.background.fillOpacity = 0.05;\r\n    valueAxis.renderer.inside = true;\r\n    valueAxis.renderer.labels.template.verticalCenter = \"bottom\";\r\n    valueAxis.renderer.labels.template.padding(1, 1, 1, 1);\r\n\r\n    //valueAxis.renderer.maxLabelPosition = 0.95;\r\n    valueAxis.renderer.fontSize = \"0.8em\"\r\n\r\n    let series = x.series.push(new am4charts.CandlestickSeries());\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.openValueY = \"open\";\r\n    series.dataFields.valueY = \"close\";\r\n    series.dataFields.lowValueY = \"low\";\r\n    series.dataFields.highValueY = \"high\";\r\n    series.clustered = false;\r\n    series.tooltipText = \"open: {openValueY.value}\\nlow: {lowValueY.value}\\nhigh: {highValueY.value}\\nclose: {valueY.value}\";\r\n    series.name = \"JSON\";\r\n    series.defaultState.transitionDuration = 0;\r\n\r\n\r\n    let valueAxis2 = x.yAxes.push(new am4charts.ValueAxis());\r\n    valueAxis2.tooltip.disabled = true;\r\n    // height of axis\r\n    valueAxis2.height = am4core.percent(35);\r\n    valueAxis2.zIndex = 3\r\n    // this makes gap between panels\r\n    valueAxis2.marginTop = 30;\r\n    valueAxis2.renderer.baseGrid.disabled = true;\r\n    valueAxis2.renderer.inside = true;\r\n    valueAxis2.renderer.labels.template.verticalCenter = \"bottom\";\r\n    valueAxis2.renderer.labels.template.padding(2, 2, 2, 2);\r\n    //valueAxis.renderer.maxLabelPosition = 0.95;\r\n    valueAxis2.renderer.fontSize = \"0.8em\"\r\n\r\n    valueAxis2.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\r\n    valueAxis2.renderer.gridContainer.background.fillOpacity = 0.05;\r\n\r\n    let series2 = x.series.push(new am4charts.ColumnSeries());\r\n    series2.dataFields.dateX = \"date\";\r\n    series2.clustered = false;\r\n    series2.dataFields.valueY = \"volume\";\r\n    series2.yAxis = valueAxis2;\r\n    series2.tooltipText = \"{valueY.value}\";\r\n    series2.name = \"Series 2\";\r\n    // volume should be summed\r\n    series2.groupFields.valueY = \"sum\";\r\n    series2.defaultState.transitionDuration = 0;\r\n\r\n    x.cursor = new am4charts.XYCursor();\r\n\r\n    let scrollbarX = new am4charts.XYChartScrollbar();\r\n\r\n    let sbSeries = x.series.push(new am4charts.LineSeries());\r\n    sbSeries.dataFields.valueY = \"close\";\r\n    sbSeries.dataFields.dateX = \"date\";\r\n    scrollbarX.series.push(sbSeries);\r\n    sbSeries.disabled = true;\r\n    scrollbarX.marginBottom = 20;\r\n    x.scrollbarX = scrollbarX;\r\n    scrollbarX.scrollbarChart.xAxes.getIndex(0).minHeight = undefined;\r\n\r\n\r\n\r\n    /**\r\n     * Set up external controls\r\n     */\r\n\r\n    // Date format to be used in input fields\r\n    let inputFieldFormat = \"yyyy-MM-dd\";\r\n\r\n    // dispose후에 버튼을 제어할려고 하니까 에러가 발생한다. document를 직접 제어하는 방법 말고 다른 방법을 써야 한다.\r\n    // document.getElementById(\"b1m\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.add(date, \"month\", -1);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"b3m\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.add(date, \"month\", -3);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"b6m\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.add(date, \"month\", -6);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"b1y\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.add(date, \"year\", -1);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"bytd\").addEventListener(\"click\", function () {\r\n    //   let max = dateAxis.groupMax[\"day1\"];\r\n    //   let date = new Date(max);\r\n    //   am4core.time.round(date, \"year\", 1);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    // document.getElementById(\"bmax\").addEventListener(\"click\", function () {\r\n    //   let min = dateAxis.groupMin[\"day1\"];\r\n    //   let date = new Date(min);\r\n    //   zoomToDates(date);\r\n    // });\r\n\r\n    dateAxis.events.on(\"selectionextremeschanged\", function () {\r\n      updateFields();\r\n    });\r\n\r\n    dateAxis.events.on(\"extremeschanged\", updateFields);\r\n\r\n\r\n    function updateFields() {\r\n      let minZoomed = dateAxis.minZoomed + am4core.time.getDuration(dateAxis.mainBaseInterval.timeUnit, dateAxis.mainBaseInterval.count) * 0.5;\r\n      document.getElementById(\"fromfield\").value = x.dateFormatter.format(minZoomed, inputFieldFormat);\r\n      document.getElementById(\"tofield\").value = x.dateFormatter.format(new Date(dateAxis.maxZoomed), inputFieldFormat);\r\n    };\r\n\r\n\r\n    // fromRef.current.addEventListener(\"keyup\", updateZoom)\r\n\r\n    document.getElementById(\"fromfield\").addEventListener(\"keyup\", updateZoom);\r\n    document.getElementById(\"tofield\").addEventListener(\"keyup\", updateZoom);\r\n\r\n    let zoomTimeout;\r\n    function updateZoom() {\r\n      if (zoomTimeout) {\r\n        clearTimeout(zoomTimeout);\r\n      }\r\n      zoomTimeout = setTimeout(function (e) {\r\n        let start = document.getElementById(\"fromfield\").value;\r\n        let end = document.getElementById(\"tofield\").value;\r\n        if ((start.length < inputFieldFormat.length) || (end.length < inputFieldFormat.length)) {\r\n          return;\r\n        }\r\n        let startDate = x.dateFormatter.parse(start, inputFieldFormat);\r\n        let endDate = x.dateFormatter.parse(end, inputFieldFormat);\r\n\r\n        if (startDate && endDate) {\r\n          dateAxis.zoomToDates(startDate, endDate);\r\n        }\r\n      }, 500);\r\n    };\r\n\r\n    function zoomToDates(date) {\r\n      let min = dateAxis.groupMin[\"day1\"];\r\n      let max = dateAxis.groupMax[\"day1\"];\r\n      dateAxis.keepSelection = true;\r\n      //   dateAxis.start = (date.getTime() - min)/(max - min);\r\n      //   dateAxis.end = 1;\r\n\r\n      dateAxis.zoom({ start: (date.getTime() - min) / (max - min), end: 1 });\r\n    };\r\n\r\n    chart.current = x;\r\n    // 이벤트 해제 : 해제하는 함수 등록\r\n    return () => {\r\n      x.dispose();\r\n    };\r\n    // 종목코드가 바뀌면 차트를 dispose 하도록 한다.\r\n  }, [code]);\r\n\r\n\r\n  // 현재 종목의 마지막 종가 \r\n  const getPrice = async () => {\r\n    try {\r\n      const url = `/api/daily-price/?code=${code}`;  // 배포용\r\n      const response = await axios.get(url);\r\n\r\n      const url2 = `/api/company-state/?code=${code}`\r\n      const closePrice = response.data[response.data.length - 1].close.toString()\r\n        .replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\")\r\n      setClosePrice(closePrice);\r\n\r\n      setLastUpdatePrice(response.data[response.data.length - 1].date);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  /* HTML */\r\n  return (\r\n    <div className=\"chart-div\">\r\n      {/* 기업명, 가격표시 */}\r\n      <div>\r\n        <p>\r\n          <span style={{ fontSize: '200%' }}>{compName}</span>\r\n          <span>\r\n            {code} ({lastUpdatePrice})\r\n          </span>\r\n          \r\n        </p>\r\n\r\n        <p>\r\n        <h6>[{sec_nm}]</h6>\r\n        </p>\r\n\r\n      </div>\r\n\r\n      {/* <div id=\"controls\" className=\"controls-div\"> */}\r\n      <div className=\"chart-input-div\">\r\n        기간: <input type=\"text\" id=\"fromfield\" className=\"amcharts-input\" />\r\n        ~   <input type=\"text\" id=\"tofield\" className=\"amcharts-input\" />\r\n        <span style={{ fontSize: '200%', float:\"right\"}}>{closePrice}원</span>\r\n      </div>\r\n\r\n      {/* <div className=\"chart-btns-div\">\r\n          <button id=\"b1m\" className=\"btn btn-outline-primary\">1개월</button>\r\n          <button id=\"b3m\" className=\"btn btn-outline-primary\">3개월</button>\r\n          <button id=\"b6m\" className=\"btn btn-outline-primary\">6개월</button>\r\n          <button id=\"b1y\" className=\"btn btn-outline-primary\">1년</button>\r\n          <button id=\"bytd\" className=\"btn btn-outline-primary\">연초누계</button>\r\n          <button id=\"bmax\" className=\"btn btn-outline-primary\">전체</button>\r\n        </div> */}\r\n\r\n      {/* </div> */}\r\n\r\n      {/* 차트 구현 코드 */}\r\n      <div id=\"chartdiv\" className=\"chart-candle-div\" ></div>\r\n    </div>\r\n  );\r\n};","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinancialTable.js",["82","83","84","85","86"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport { IndicatorsObject } from './Tooltip';\r\n\r\n/*\r\n    1. 좌우 연도 변경 버튼\r\n    2. 연도, 수치 hover 표시\r\n    3. 적자는 빨간색으로 표시\r\n    4. 폰트 사이즈 조정 (테이블 사이즈 조정)\r\n    5. 수치가 0 이거나 0.00일 경우 N/A 처리 하기\r\n*/\r\nexport default function Tables() {\r\n    // component state\r\n    const [finData, setFinData] = useState([]);\r\n    const [finColorState, SetFinColorState] = useState();  // 적자는 붉은색으로 표시\r\n\r\n    // 종목코드 취득\r\n    const { code, compName } = useSelector(\r\n        state => ({\r\n            code: state.searchReducer.code,\r\n            compName: state.searchReducer.comp_name,\r\n        }), shallowEqual);\r\n\r\n    useEffect(() => {\r\n        getFinYearData();\r\n    }, [code]);\r\n\r\n\r\n    /* 검색된 종목의 재무정보 취득 함수:: Hook memo 사용 검토 */\r\n    const getFinYearData = async () => {\r\n        try {\r\n            const url = `/api/company-state/?code=${code}`;  // 배포용\r\n            const response = await axios.get(url);\r\n            setFinData(response.data);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    // 억 단위 변환\r\n    const moneyFormat = (money) => {\r\n\r\n        if (isNA(money) !== \"N/A\") {\r\n            return Math.floor(money / 100000000).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n        } else {\r\n            return \"N/A\";\r\n        }\r\n    };\r\n\r\n    // N/A 판별\r\n    const isNA = (ratio) => {\r\n        if (ratio === 0 || ratio === \"0.00\") {\r\n            return \"N/A\";\r\n        } else {\r\n            return ratio;\r\n        }\r\n    };\r\n\r\n    const tooltip = () => {\r\n        return\r\n    };\r\n\r\n    /* 조건검색 테이블 변환 함수 */\r\n\r\n\r\n\r\n    // if (loading) return <div>loading...</div>;\r\n    // if (error) return <div>error.</div>;\r\n    // if (!setFinData) return null;\r\n\r\n    /* HTML */\r\n    return (\r\n        // 좌우 버튼을 두고 연도를 바꿀수 있게끔 만들어야 한다.\r\n\r\n        <div className=\"table-div\">\r\n            <div className=\"table-btns-div\">\r\n                {/* <button className=\"btn btn-primary\">이전</button>\r\n            <button className=\"btn btn-primary\">다음</button> */}\r\n            </div>\r\n\r\n            <table className=\"table table-bordered table-hover\">\r\n                <thead className=\"text-center\">\r\n                    <tr className=\"active\">\r\n                        {/* 연도 */}\r\n                        <th>투자지표</th>\r\n                        {finData.map(fin => {\r\n                            return <th key={fin.year}>{fin.year}</th>\r\n                        })}\r\n\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    <tr>\r\n                        {/* 매출액 */}\r\n                        {IndicatorsObject.revenue}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.revenue < 5000000000 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {moneyFormat(fin.revenue)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 매출총이익 */}\r\n                        {IndicatorsObject.gross_profit}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.gross_profit < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {moneyFormat(fin.gross_profit)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 영업이익 */}\r\n                        {IndicatorsObject.operating_profit}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.operating_profit < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {moneyFormat(fin.operating_profit)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 당기순이익 */}\r\n                        {IndicatorsObject.net_profit}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.net_profit < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {moneyFormat(fin.net_profit)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 매출액 증가율 */}\r\n                        {IndicatorsObject.sales_growth_rate}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.sales_growth_rate < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.sales_growth_rate)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 매출이익률 */}\r\n                        {IndicatorsObject.gross_margin}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.gross_margin < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.gross_margin)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 영업이익률 */}\r\n                        {IndicatorsObject.operating_margin}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.operating_margin < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.operating_margin)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 부채비율 */}\r\n                        {IndicatorsObject.debt_ratio}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.debt_ratio < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.debt_ratio)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 당좌비율 */}\r\n                        {IndicatorsObject.quick_ratio}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.quick_ratio < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.quick_ratio)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 유동비율 */}\r\n                        {IndicatorsObject.current_ratio}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.current_ratio < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.current_ratio)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n\r\n\r\n                    <tr>\r\n                        {/* 순이익증가율 */}\r\n                        {IndicatorsObject.net_profit_growth_rate}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.net_profit_growth_rate < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.net_profit_growth_rate)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 총자산증가율 */}\r\n                        {IndicatorsObject.asset_growth_rate}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.asset_growth_rate < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.asset_growth_rate)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* PER */}\r\n                        {IndicatorsObject.PER}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.per < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.per)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* EPS */}\r\n                        {IndicatorsObject.EPS}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.eps < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.eps).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* PBR */}\r\n                        {IndicatorsObject.PBR}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.pbr < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.pbr)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* BPS */}\r\n                        {IndicatorsObject.BPS}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.bps < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(Math.ceil(fin.bps)).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* BIS */}\r\n                        {IndicatorsObject.BIS}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.bis < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.bis)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* ROA */}\r\n                        {IndicatorsObject.ROA}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.roa < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.roa)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* ROE */}\r\n                        {IndicatorsObject.ROE}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.roe < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.roe)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        {/* 자산회전율 */}\r\n                        {IndicatorsObject.asset_turnover}\r\n                        {finData.map(fin => {\r\n                            return <td className=\"text-center\" key={fin.year}>\r\n                                <span style={fin.asset_turnover < 0 ? { color: \"red\" } : { color: \"black\" }}>\r\n                                    {isNA(fin.asset_turnover)}\r\n                                </span>\r\n                            </td>\r\n                        })}\r\n                    </tr>\r\n\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n    )\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinSearchTable.js",["87","88","89","90","91"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useDispatch } from 'react-redux';\r\nimport { companyInfoActionObject } from '../modules/SearchReducer';\r\nimport { IndicatorsObject } from './Tooltip';\r\n// icon css\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n/*\r\n    1. 검색 결과를 resultHTML로 넘기기 (상태를 이용?) : 완료\r\n    2. conditionHTML과 resultHTML간의 스위칭 구조 구현\r\n    3. resultHTML 디자인 하기 \r\n    4. 주소창에 쿼리스트링이 표시되는 문제 파악하고 해결하기\r\n    5. 종목을 클릭하면 해당 종목을 검색, 주가차트 표시\r\n*/\r\nexport default function FinSearchTable() {\r\n    // 조건검사 결과 데이터\r\n    const [resultData, setResultData] = useState();\r\n    const [changeResultHTML, setChangeResultHTML] = useState(false);  // 결과 테이블 HTML 출력\r\n    const [conditionArr, setConditionArr] = useState();  // 입력한 조건들만 저장하는 변수\r\n\r\n    const dispatch = useDispatch();\r\n    // rootQuery\r\n    // const rootQueryString = `http://localhost:8000/api/company-state/`;  // 개발용\r\n    const rootQueryString = `/api/company-state/`  // 배포용\r\n\r\n\r\n    // conditionHTML의 form의 input값들을 쿼리스트링으로 변환및 결과값을 set하는 함수\r\n    const handleForm = async (e) => {\r\n        try {\r\n            // 조건검색 쿼리 : 무식하게 코딩함. 유지보수가 더 쉽고 효율적인 코드로 바꿔야함\r\n            const data = new FormData(e.target);\r\n\r\n            const finQueryStr = `${rootQueryString}?year=2020\r\n            &min_revenue=${data.get('min_revenue').length === 0 ? '' : data.get('min_revenue') * 100000000}\r\n            &max_revenue=${data.get('max_revenue').length === 0 ? '' : data.get('max_revenue') * 100000000}\r\n            &min_gross_profit=${data.get('min_gross_profit').length === 0 ? '' : data.get('min_gross_profit') * 100000000}\r\n            &max_gross_profit=${data.get('max_gross_profit').length === 0 ? '' : data.get('max_gross_profit') * 100000000}\r\n            &min_operating_profit=${data.get('min_operating_profit').length === 0 ? '' : data.get('min_operating_profit') * 100000000}\r\n            &max_operating_profit=${data.get('max_operating_profit').length === 0 ? '' : data.get('max_operating_profit') * 100000000}\r\n            &min_net_profit=${data.get('min_net_profit').length === 0 ? '' : data.get('min_net_profit') * 100000000}\r\n            &max_net_profit=${data.get('max_net_profit').length === 0 ? '' : data.get('max_net_profit') * 100000000}\r\n            &min_sales_growth_rate=${data.get('min_sales_growth_rate')}&max_sales_growth_rate=${data.get('max_sales_growth_rate')}\r\n            &min_gross_margin=${data.get('min_gross_margin')}&max_gross_margin=${data.get('max_gross_margin')}\r\n            &min_operating_margin=${data.get('min_operating_margin')}&max_operating_margin=${data.get('max_operating_margin')}\r\n            &min_debt_ratio=${data.get('min_debt_ratio')}&max_debt_ratio=${data.get('max_debt_ratio')}\r\n            &min_quick_ratio=${data.get('min_quick_ratio')}&max_quick_ratio=${data.get('max_quick_ratio')}\r\n            &min_current_ratio=${data.get('min_current_ratio')}&max_current_ratio=${data.get('max_current_ratio')}\r\n            &min_net_profit_growth_rate=${data.get('min_net_profit_growth_rate')}&max_net_profit_growth_rate=${data.get('max_net_profit_growth_rate')}\r\n            &min_asset_growth_rate=${data.get('min_asset_growth_rate')}&max_asset_growth_rate=${data.get('max_asset_growth_rate')}\r\n            &min_per=${data.get('min_per')}&max_per=${data.get('max_per')}\r\n            &min_eps=${data.get('min_eps')}&max_eps=${data.get('max_eps')}\r\n            &min_pbr=${data.get('min_pbr')}&max_pbr=${data.get('max_pbr')}\r\n            &min_bps=${data.get('min_bps')}&max_bps=${data.get('max_bps')}\r\n            &min_bis=${data.get('min_bis')}&max_bis=${data.get('max_bis')}\r\n            &min_roa=${data.get('min_roa')}&max_roa=${data.get('max_roa')}\r\n            &min_roe=${data.get('min_roe')}&max_roe=${data.get('max_roe')}\r\n            &min_asset_turnover=${data.get('min_asset_turnover')}\r\n            &max_asset_turnover=${data.get('max_asset_turnover')}`;\r\n\r\n            // 가격(종가) 검색 쿼리: 조건 검색되어 나온 기업명, 종목코드와 가격조건에 검색된 기업명과 종목코드를 대조하여 일치하는 기업명만 표시하면 가격조건도 포함시킬수 있다.\r\n            const priceQueryStr = ``;\r\n\r\n            const response = await axios.get(finQueryStr.replace(/(\\s*)/g, \"\"));  // 공백문자 제거\r\n\r\n            // 결과값을 상태 저장\r\n            setResultData(response.data);\r\n\r\n            // 결과값을 모두 받아오면 ResultHTML로 상태 변경\r\n            setChangeResultHTML(true);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n\r\n    };\r\n\r\n    // 재검색 버튼 클릭 컴포넌트 로컬 상태 변화 함수\r\n    const onClickedStateChange = () => {\r\n        setChangeResultHTML(false);\r\n    };\r\n\r\n    /* 조건검색 form HTML */\r\n    const conditionHTML = () => {\r\n        /*\r\n            1.기존에 검색한 수치를 각 입력 폼에 그대로 두기 (리덕스 스토어로 구현 가능할듯 함)\r\n        */\r\n        return (\r\n            <div>\r\n                (2020년 기준)\r\n                <form name=\"conditions\" id=\"conditions\" onSubmit={e => {\r\n                    e.preventDefault();\r\n                    handleForm(e);\r\n                }}>\r\n\r\n                    <input type=\"hidden\" name=\"year\" value=\"2020\" />\r\n                    <table className=\"table table-bordered table-hover\">\r\n\r\n                        <thead className=\"text-center\">\r\n                            <tr>\r\n                                {/* 검색버튼을 누르거나 엔터로 검색을 하면 resultHTML을 표시하도록 제어한다. */}\r\n                                <th><button className=\"btn btn-outline-primary btn-sm\" type=\"submit\">검색</button></th>\r\n                                <th>최소</th>\r\n                                <th>최대</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody className=\"text-center\">\r\n                            <tr>\r\n                                {/* 매출액 */}\r\n                                {IndicatorsObject.revenue}\r\n                                <th><input type=\"number\" name=\"min_revenue\" /></th>\r\n                                <th><input type=\"number\" name=\"max_revenue\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 매출총이익 */}\r\n                                {IndicatorsObject.gross_profit}\r\n                                <th><input type=\"number\" name=\"min_gross_profit\" /></th>\r\n                                <th><input type=\"number\" name=\"max_gross_profit\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 영업이익 */}\r\n                                {IndicatorsObject.operating_profit}\r\n                                <th><input type=\"number\" name=\"min_operating_profit\" /></th>\r\n                                <th><input type=\"number\" name=\"max_operating_profit\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 당기순이익 */}\r\n                                {IndicatorsObject.net_profit}\r\n                                <th><input type=\"number\" name=\"min_net_profit\" /></th>\r\n                                <th><input type=\"number\" name=\"max_net_profit\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 매출액 증가율 */}\r\n                                {IndicatorsObject.sales_growth_rate}\r\n                                <th><input type=\"number\" name=\"min_sales_growth_rate\" /></th>\r\n                                <th><input type=\"number\" name=\"max_sales_growth_rate\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 매출이익률 */}\r\n                                {IndicatorsObject.gross_margin}\r\n                                <th><input type=\"number\" name=\"min_gross_margin\" /></th>\r\n                                <th><input type=\"number\" name=\"max_gross_margin\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 영업이익률 */}\r\n                                {IndicatorsObject.operating_margin}\r\n                                <th><input type=\"number\" name=\"min_operating_margin\" /></th>\r\n                                <th><input type=\"number\" name=\"max_operating_margin\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 부채비율 */}\r\n                                {IndicatorsObject.debt_ratio}\r\n                                <th><input type=\"number\" name=\"min_debt_ratio\" /></th>\r\n                                <th><input type=\"number\" name=\"max_debt_ratio\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 당좌비율 */}\r\n                                {IndicatorsObject.quick_ratio}\r\n                                <th><input type=\"number\" name=\"min_quick_ratio\" /></th>\r\n                                <th><input type=\"number\" name=\"max_quick_ratio\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 유동비율 */}\r\n                                {IndicatorsObject.current_ratio}\r\n                                <th><input type=\"number\" name=\"min_current_ratio\" /></th>\r\n                                <th><input type=\"number\" name=\"max_current_ratio\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 순이익증가율 */}\r\n                                {IndicatorsObject.net_profit_growth_rate}\r\n                                <th><input type=\"number\" name=\"min_net_profit_growth_rate\" /></th>\r\n                                <th><input type=\"number\" name=\"max_net_profit_growth_rate\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 총자산증가율 */}\r\n                                {IndicatorsObject.asset_growth_rate}\r\n                                <th><input type=\"number\" name=\"min_asset_growth_rate\" /></th>\r\n                                <th><input type=\"number\" name=\"max_asset_growth_rate\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* PER */}\r\n                                {IndicatorsObject.PER}\r\n                                <th><input type=\"number\" name=\"min_per\" /></th>\r\n                                <th><input type=\"number\" name=\"max_per\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* EPS */}\r\n                                {IndicatorsObject.EPS}\r\n                                <th><input type=\"number\" name=\"min_eps\" /></th>\r\n                                <th><input type=\"number\" name=\"max_eps\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* PBR */}\r\n                                {IndicatorsObject.PBR}\r\n                                <th><input type=\"number\" name=\"min_pbr\" /></th>\r\n                                <th><input type=\"number\" name=\"max_pbr\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* BPS */}\r\n                                {IndicatorsObject.BPS}\r\n                                <th><input type=\"number\" name=\"min_bps\" /></th>\r\n                                <th><input type=\"number\" name=\"max_bps\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* BIS */}\r\n                                {IndicatorsObject.BIS}\r\n                                <th><input type=\"number\" name=\"min_bis\" /></th>\r\n                                <th><input type=\"number\" name=\"max_bis\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* ROA */}\r\n                                {IndicatorsObject.ROA}\r\n                                <th><input type=\"number\" name=\"min_roa\" /></th>\r\n                                <th><input type=\"number\" name=\"max_roa\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* ROE */}\r\n                                {IndicatorsObject.ROE}\r\n                                <th><input type=\"number\" name=\"min_roe\" /></th>\r\n                                <th><input type=\"number\" name=\"max_roe\" /></th>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                {/* 자산회전율 */}\r\n                                {IndicatorsObject.asset_turnover}\r\n                                <th><input type=\"number\" name=\"min_asset_turnover\" /></th>\r\n                                <th><input type=\"number\" name=\"max_asset_turnover\" /></th>\r\n                            </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </form>\r\n            </div>\r\n        );\r\n    };\r\n\r\n\r\n    /* 검색된 결과를 표시하는 HTML */\r\n    const resultHTML = () => {\r\n        /*\r\n            1.스크롤이 가능한 테이블이여야 한다. 또는 테이블과 비슷한 구조여야 한다.\r\n            2.재검색 버튼 만들기: 클릭하면 다시 conditionHTML로 넘어간다.\r\n            3.입력한 조건의 지표들만 표시\r\n            4.결과가 없을경우의 화면 표시\r\n            5.실적표 버튼을 누르고 다시 기존 검색한 종목들을 볼수 있도록 검색결과 화면으로 돌아올수 있게 하기 (리덕스 스토어로 구현 가능할듯 함)\r\n        */\r\n\r\n        if (resultData.length > 0) {\r\n            return (\r\n                <div className=\"fixed-table-container\">\r\n                    {/* 연도 기준을 최신 연도로 할지 아니면 사용자가 선택하게 할지 \r\n                    아니면 조건검색의 근본 개념을 각 투자지표들의 지속성을 평가하는걸로 바꿔서 연도 기준 자체를 없앨지 정해야함 */}\r\n                    (2020년 기준)\r\n                    <div className=\"fixed-table-body\">\r\n                        <table className=\"table table-bordered table-hover table-responsive-md\">\r\n                            <thead className=\"text-center\">\r\n                                <tr>\r\n                                    <th scope=\"col\"><button className=\"btn btn-outline-primary btn-sm\" onClick={onClickedStateChange}>재검색</button></th>\r\n                                    <th scope=\"col\">종목명 ({resultData.length}개)</th>\r\n                                    {/* 입력한 조건의 투자지표만 표시 */}\r\n                                    {/* <th>지표</th> */}\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody className=\"text-center\">\r\n                                {resultData.map(data => {\r\n                                    return (\r\n                                        // 클릭시 해당 종목 검색\r\n                                        <tr className=\"trow\" key={data.code} tyep=\"button\" onClick={() => { dispatch(companyInfoActionObject(data.code, data.company_nm, data.sec_nm)); }}>\r\n                                            <th>{/* 실적보기 버튼 만들어서 관련종목의 검색한 연도의 실적표를 팝업으로 띄우기 */}</th>\r\n                                            <td>\r\n                                                <div>\r\n                                                    <b>{data.company_nm}</b>\r\n                                                </div>\r\n                                                <div>\r\n                                                    [{data.sec_nm}]\r\n                                                </div>\r\n\r\n                                            </td>\r\n                                            {/* 입력한 조건의 투자지표만 표시 */}\r\n                                            {/* <td>\r\n                                                {data.current_ratio}\r\n                                            </td> */}\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        /* 결과값 없음 */\r\n        else {\r\n            return (\r\n                <div>\r\n                    <div className=\"fixed-table-body\">\r\n                        <table className=\"table table-bordered table-hover\">\r\n                            <thead className=\"text-center\">\r\n                                <tr>\r\n                                    <th><button className=\"btn btn-outline-primary\" onClick={onClickedStateChange}>재검색</button></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody className=\"text-center\">\r\n                                <tr>\r\n                                    <th>\r\n                                        조건에 맞는 검색 결과가 없습니다.\r\n                                    </th>\r\n\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n    };\r\n\r\n\r\n    /* HTML */\r\n    return (\r\n        <div className=\"table-div\">\r\n            {/* 테이블 전체를 jsx 방식으로 대체한다. */}\r\n            {changeResultHTML ? resultHTML() : conditionHTML()}\r\n        </div>\r\n    )\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\index.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Tooltip.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\store\\index.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\RootReducer.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NotFound.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Home.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Counter.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\SearchReducer.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NavBar.js",["92","93"],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"94","replacedBy":"98"},{"ruleId":"96","replacedBy":"99"},{"ruleId":"94","replacedBy":"100"},{"ruleId":"96","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":7,"column":10,"nodeType":"104","messageId":"105","endLine":7,"endColumn":19},{"ruleId":"102","severity":1,"message":"106","line":22,"column":10,"nodeType":"104","messageId":"105","endLine":22,"endColumn":13},{"ruleId":"102","severity":1,"message":"107","line":22,"column":15,"nodeType":"104","messageId":"105","endLine":22,"endColumn":21},{"ruleId":"102","severity":1,"message":"108","line":245,"column":14,"nodeType":"104","messageId":"105","endLine":245,"endColumn":25},{"ruleId":"109","severity":1,"message":"110","line":261,"column":6,"nodeType":"111","endLine":261,"endColumn":12,"suggestions":"112"},{"ruleId":"102","severity":1,"message":"113","line":270,"column":13,"nodeType":"104","messageId":"105","endLine":270,"endColumn":17},{"ruleId":"102","severity":1,"message":"114","line":16,"column":12,"nodeType":"104","messageId":"105","endLine":16,"endColumn":25},{"ruleId":"102","severity":1,"message":"115","line":16,"column":27,"nodeType":"104","messageId":"105","endLine":16,"endColumn":43},{"ruleId":"102","severity":1,"message":"116","line":19,"column":19,"nodeType":"104","messageId":"105","endLine":19,"endColumn":27},{"ruleId":"109","severity":1,"message":"117","line":27,"column":8,"nodeType":"111","endLine":27,"endColumn":14,"suggestions":"118"},{"ruleId":"102","severity":1,"message":"119","line":60,"column":11,"nodeType":"104","messageId":"105","endLine":60,"endColumn":18},{"ruleId":"102","severity":1,"message":"120","line":7,"column":10,"nodeType":"104","messageId":"105","endLine":7,"endColumn":25},{"ruleId":"102","severity":1,"message":"121","line":8,"column":10,"nodeType":"104","messageId":"105","endLine":8,"endColumn":26},{"ruleId":"102","severity":1,"message":"122","line":21,"column":12,"nodeType":"104","messageId":"105","endLine":21,"endColumn":24},{"ruleId":"102","severity":1,"message":"123","line":21,"column":26,"nodeType":"104","messageId":"105","endLine":21,"endColumn":41},{"ruleId":"102","severity":1,"message":"124","line":63,"column":19,"nodeType":"104","messageId":"105","endLine":63,"endColumn":32},{"ruleId":"125","severity":1,"message":"126","line":55,"column":17,"nodeType":"127","endLine":55,"endColumn":54},{"ruleId":"125","severity":1,"message":"128","line":62,"column":33,"nodeType":"127","endLine":62,"endColumn":56},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],["129"],["130"],["129"],["130"],"no-unused-vars","'RootState' is defined but never used.","Identifier","unusedVar","'sec' is assigned a value but never used.","'setSec' is assigned a value but never used.","'zoomToDates' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPrice'. Either include it or remove the dependency array.","ArrayExpression",["131"],"'url2' is assigned a value but never used.","'finColorState' is assigned a value but never used.","'SetFinColorState' is assigned a value but never used.","'compName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFinYearData'. Either include it or remove the dependency array.",["132"],"'tooltip' is assigned a value but never used.","'FontAwesomeIcon' is defined but never used.","'faQuestionCircle' is defined but never used.","'conditionArr' is assigned a value but never used.","'setConditionArr' is assigned a value but never used.","'priceQueryStr' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [code, getPrice]",{"range":"137","text":"138"},"Update the dependencies array to be: [code, getFinYearData]",{"range":"139","text":"140"},[9329,9335],"[code, getPrice]",[784,790],"[code, getFinYearData]"]