[{"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\index.js":"1","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\Button.js":"2","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\CompInfo.js":"3","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\store\\index.js":"4","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\BoardInputForm.js":"5","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\rootReducer.js":"6","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\extra.js":"7","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\RootReducer.js":"8","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Extra.js":"9","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Counter.js":"10","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Paging.js":"11","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\HTTP.js":"12","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Home.js":"13","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Router.js":"14","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\SearchReducer.js":"15","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NavBar.js":"16","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Chart.js":"17","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinancialTable.js":"18","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\PerformSearch.js":"19","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\CompanyBoard.js":"20","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NotFound.js":"21"},{"size":1358,"mtime":1627182788617,"results":"22","hashOfConfig":"23"},{"size":719,"mtime":1616582396855,"results":"24","hashOfConfig":"25"},{"size":2405,"mtime":1627031411595,"results":"26","hashOfConfig":"23"},{"size":235,"mtime":1614057590430,"results":"27","hashOfConfig":"23"},{"size":1193,"mtime":1625029349568,"results":"28","hashOfConfig":"23"},{"size":699,"mtime":1616047365748,"results":"29","hashOfConfig":"25"},{"size":255,"mtime":1616047354951,"results":"30","hashOfConfig":"23"},{"size":893,"mtime":1626507800108,"results":"31","hashOfConfig":"23"},{"size":255,"mtime":1616047354951,"results":"32","hashOfConfig":"25"},{"size":2929,"mtime":1618032015001,"results":"33","hashOfConfig":"23"},{"size":6334,"mtime":1627165858196,"results":"34","hashOfConfig":"23"},{"size":2063,"mtime":1625543786517,"results":"35","hashOfConfig":"23"},{"size":11004,"mtime":1627037393588,"results":"36","hashOfConfig":"23"},{"size":1329,"mtime":1627199165186,"results":"37","hashOfConfig":"23"},{"size":913,"mtime":1626770970183,"results":"38","hashOfConfig":"23"},{"size":3197,"mtime":1626771021294,"results":"39","hashOfConfig":"23"},{"size":10994,"mtime":1627048911632,"results":"40","hashOfConfig":"23"},{"size":7675,"mtime":1627038237603,"results":"41","hashOfConfig":"23"},{"size":2288,"mtime":1627046988497,"results":"42","hashOfConfig":"23"},{"size":701,"mtime":1627031381336,"results":"43","hashOfConfig":"23"},{"size":270,"mtime":1627031385656,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"130xh85",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"zefywn",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\index.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\Button.js",[],["95","96"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\CompInfo.js",[],["97","98"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\store\\index.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\BoardInputForm.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\rootReducer.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\extra.js",[],["99","100"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\RootReducer.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Extra.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Counter.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Paging.js",["101","102","103"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\HTTP.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Home.js",["104","105","106"],"import React, { useState }  from 'react';\r\nimport axios from 'axios';\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\r\nimport '../CSS/Style.css';\r\n\r\nimport TitleBar from '../components/NavBar';\r\nimport CandleChart from '../components/Chart';\r\nimport FinancialTable from '../components/FinancialTable';\r\nimport PerformSearch from '../components/PerformSearch';\r\n\r\n/*\r\n  1. 종목조건 검색\r\n  2. 포트폴리오 셀렉션\r\n  3. 뉴스/공시 (크롤링?)\r\n  4. 연간실적\r\n  5. 동종업 실적 비교\r\n\r\n  6. UI,CSS,레이아웃 조정\r\n  7. 처음 보여줄 데이터 기준 정하기\r\n  8. 최근 검색 항목 보여주기\r\n*/\r\nexport default function Home () {\r\n    const [result, setResult] = useState(0);\r\n    // 실적표, 조건검색표 가시, 비가시 상태 초기화\r\n    const [finVisible, setFinVisible] = useState({visibility:'hidden', float: 'right'});\r\n    const [perVisible, setPerVisible] = useState({visibility:'visible', float: 'right'});\r\n    const [component, setComponent] = useState(false);\r\n\r\n    // 리덕스 스토어로부터 검색정보 받기\r\n    const { code, compName } = useSelector(\r\n        state => ({\r\n            code: state.searchReducer.code,\r\n            compName: state.searchReducer.comp_name,\r\n        }), shallowEqual);\r\n\r\n\r\n\r\n\r\n    // 계산 요청 메소드(POST)\r\n    const CalRequest = async(e) => {\r\n        try {\r\n            e.preventDefault();  // 페이지 새로고침 막기\r\n            const RandomId = Math.random().toString(36).substr(2,11);\r\n\r\n            const url = `http://localhost:8000/api/cal-request/`;\r\n\r\n            await axios.post(url, {\r\n                id: RandomId,\r\n                operand_a: e.target.operand_a.value,\r\n                operand_b: e.target.operand_b.value,\r\n                operator: e.target.operator.value\r\n            });\r\n\r\n            GetResponse(RandomId);\r\n            // DeleteResults(RandomId);\r\n\r\n        } catch (error) {\r\n            // 데이터를 전송하지 못한것에 대한 예외처리 필요\r\n            console.error(error);\r\n        };\r\n    };\r\n\r\n    // 계산된 값을 받는 메소드\r\n    const GetResponse = async(id) => {\r\n        // 병렬처리 하기 위해선 로딩이 필요하다. 아니면 리스팅 시간을 없애던가, response 됐다는 신호가 필요하다. \r\n        try {\r\n            const response = await axios.get(`http://localhost:8000/api/cal-response/?id=${id}`);\r\n            setResult(response.data.results[0].return_val);\r\n\r\n            // 처리된 response는 삭제(삭제하기전에 필요하다면 값 저장)\r\n            await axios.delete(`http://localhost:8000/api/cal-response/${id}`); // delete 할 때는 쿼리스트링 형식은 404에러남\r\n        } catch (error) {\r\n            // 데이터를 읽지 못한 경우에 대한 예외처리 필요 (그럴 경우 현재 방식으로는 response에 값들이 남아 있게 된다.)\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    // 조건검색 전환 버튼 제어 함수\r\n    /*\r\n        1. 버튼 제어(클릭시 재무실적표 컴포넌트와 조건검색 컴포넌트 태그 교체 또는 비쥬블처리, 버튼도 조건검색, 재무실적표 버튼 교체처리)\r\n        2. \r\n    */ \r\n    const changeComponent = (e) => {\r\n        const btnState = e.target.value;\r\n\r\n        switch (btnState) {\r\n            case \"조건검색\":\r\n                // 버튼 상태 처리 \r\n                setFinVisible({visibility: 'visible', float: 'right'});\r\n                setPerVisible({visibility: 'hidden'});\r\n                setComponent(true);\r\n                break;\r\n            case \"실적표\" :\r\n                setFinVisible({visibility: 'hidden', float: 'right'});\r\n                setPerVisible({visibility: 'visible', float: 'right'});\r\n                setComponent(false);\r\n                break;\r\n            default:\r\n                setFinVisible({visibility: 'hidden', float: 'right'});\r\n                setPerVisible({visibility: 'visible', float: 'right'});\r\n                setComponent(false);\r\n        }\r\n    };\r\n    \r\n    /* HTML */\r\n    return (\r\n        <div>\r\n            {/* 네비를 라우터에 어떻게 동작하게 해야하나? 검색 기능 구현, 라우터에서 동작 설계 */}\r\n            {/* fiexd position 적용 */}\r\n            <div className=\"container-fluid\">\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12\">\r\n                        <div className=\"nav-div\">\r\n                            <TitleBar />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12\">\r\n                        {/* 서브네비 */}\r\n                        <h4 className=\"home-compname-text\">{compName} {code}</h4>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n                        {/* 차트 */}\r\n                        <CandleChart />\r\n                    </div>\r\n\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n                        {/* 재무,조건검색 */}\r\n                        <div className=\"home-table-change-btn-div\">\r\n                            {/* 버튼을 누르면  조건검색 버튼 -> 재무실적 버튼, 재무실적 테이블 -> 조건검색 테이블*/}\r\n                            <input type=\"button\" name=\"componentChangeBtn\" onClick={changeComponent} className=\"btn btn-primary\" style={perVisible} value=\"조건검색\"/>\r\n                            <input type=\"button\" name=\"componentChangeBtn\" onClick={changeComponent} className=\"btn btn-primary\" style={finVisible} value=\"실적표\"/>\r\n                        </div>\r\n                        {component ? <PerformSearch /> : <FinancialTable />}\r\n\r\n                    </div>\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n                        {/* 뉴스사이트에서 해당 종목의 뉴스 헤드라인을 어떻게 끌어모아 표시할것인가 */}\r\n                        뉴스/공시\r\n                    </div>\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n                        {/* 파이썬 로직 서버에 임의의 사용자 요청에 대한 응답을 어떻게 줄 것인가 */}\r\n                        포트폴리오\r\n\r\n                        {/* 파이썬과 rest api를 이용해 간단한 통신해보기 */}\r\n                        {/* 종목조건 검색 */}\r\n                        {/* <form onSubmit={CalRequest}>\r\n                            <input name='operand_a' className='m-2' type='number' />\r\n                            <input name='operand_b' type='number' /> */}\r\n\r\n                        {/* <select name='operator'> */}\r\n                        {/* input 에 입력한 숫자와 이 값들을 버튼을 클릭하면 CalRequest 함수로 보내야한다. */}\r\n                        {/* <option type='text' value='add'>더하기</option>\r\n                                <option type='text' value='sub'>빼기</option>\r\n                                <option type='text' value='multi'>곱하기</option>\r\n                                <option type='text' value='div'>나누기</option>\r\n                            </select>\r\n\r\n                            <input type='submit' id='cal' value='연산요청' />\r\n                        </form> */}\r\n\r\n                        {/* 결과값 */}\r\n                        {/* <h2>{result}</h2> */}\r\n                    </div>\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n                        동종업 실적 비교\r\n                    </div>\r\n                    <div className=\"col-sm-6 mx-auto\">\r\n\r\n                    </div>\r\n                    <div className=\"col-sm-12\">\r\n                        <footer>\r\n                            {/* 사이트의 작성자나 그에 따른 저작권 정보, 연락처 등을 명시한다. */}\r\n                            <p>Copyright 2021. Morris all rights reserved</p>\r\n                        </footer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n\r\n    // const [compsPosts, setCompPosts] = useState([]);\r\n    // const [loading, setLoading] = useState(false);\r\n    // const [error, setError] = useState(null);\r\n\r\n    // // REST-API 서버에서 기업이름과 코드를 비동기로 받아오는 코드\r\n    // const fetchComps = async() => {\r\n    //     try {\r\n    //         setError(null);\r\n    //         setCompPosts(null);\r\n    //         setLoading(true);\r\n\r\n    //         const url = `http://localhost:8000/company_state/?page=1&data\r\n    //         cache-control: max-age=60\r\n    //         Cache-Control: no-store`; \r\n    //         const response = await axios.get(url);\r\n\r\n    //         console.log(response.data.results.map(comps => {return comps.year}));\r\n    //         // if (response.data.results.map(comps => {return comps.year}) === '2020'){\r\n    //         //     console.log('ddd');\r\n    //         // }\r\n\r\n    //         setCompPosts(response.data.results);\r\n    //     } catch(e) {\r\n    //         setError(e);\r\n    //     }\r\n    //     setLoading(false);\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     fetchComps();\r\n    // }, []);\r\n\r\n    // if (loading) return <div>loading...</div>;\r\n    // if (error) return <div>error.</div>;\r\n    // if (!compsPosts) return null;\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <p>updated: 2021-05-23</p>\r\n    //         <table className='table table-hover text-center'>\r\n    //             <thead>\r\n    //                 <tr>\r\n    //                     <th>기업명</th>\r\n    //                     <th>종목코드</th>\r\n    //                     <th>시장</th>\r\n    //                     <th>결산년도</th>\r\n    //                     <th>시가총액</th>\r\n    //                     <th>안정성</th>\r\n    //                     <th>성장성</th>\r\n    //                     <th>가치성</th>\r\n    //                     <th>수익성</th>\r\n    //                     <th>즐겨찾기</th>\r\n    //                 </tr>\r\n    //             </thead>\r\n    //             <tbody>\r\n    //             {compsPosts.map(comps => {\r\n    //                 return (\r\n    //                 <tr key={comps.code}> \r\n    //                     <td>{comps.company_nm}</td> \r\n    //                     <td>{comps.code}</td> \r\n    //                     <td>{comps.mk}</td>\r\n    //                     <td>{comps.year}</td>\r\n    //                     <td>150억</td>\r\n    //                     <td>양호</td>\r\n    //                     <td>양호</td>\r\n    //                     <td>우수</td>\r\n    //                     <td>위험</td>\r\n    //                     <td>*</td>\r\n    //                     </tr>);\r\n    //             })}\r\n    //             </tbody>\r\n    //         </table>\r\n    //     </div>\r\n    // );\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Router.js",["107"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\SearchReducer.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NavBar.js",["108","109","110"],"import React, { useState, useEffect} from \"react\";\r\nimport axios from 'axios';\r\nimport { companyInfoActionObject } from '../modules/SearchReducer';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// 리덕스를 사용해서 검색한 종목코드 또는 종목명 데이터를 넘겨야 겠다.\r\n// 코스피, 코스닥, 금리, VIX 지수를 실시간 확인할수 있도록 기능을 넣어야한다.\r\n\r\n/*\r\n  1. 기본 검색 기능\r\n  2. 검색어 미리보기 기능\r\n  3. 최근 가격 표시\r\n*/ \r\nexport default function TitelBar () {\r\n    const dispatch = useDispatch();\r\n    \r\n    const getCompanyInfo = async(e) => {\r\n        try{\r\n            e.preventDefault();  // 페이지 새로고침 막기\r\n            const keyword = e.target.keyword.value;\r\n\r\n            // keyword가 int인지 string 인지 분기 처리\r\n            if (isNaN(keyword)) {\r\n                // 종목명일 경우 (true)\r\n                const url = `http://localhost:8000/api/company/?company=${keyword}`;\r\n                const request = await axios.get(url);\r\n                const code = request.data[0].code;\r\n                \r\n\r\n                // 리덕스 전달\r\n                dispatch(companyInfoActionObject(code,keyword));\r\n            }else {\r\n                // 종목코드일 경우 (false)\r\n                const url = `http://localhost:8000/api/company/?code=${keyword}`;\r\n                const request = await axios.get(url);\r\n                const comp_nm = request.data[0].company;\r\n\r\n                // 리덕스 전달\r\n                dispatch(companyInfoActionObject(keyword,comp_nm));\r\n            }\r\n\r\n        } catch (error) {\r\n            // 검색이 되지 않았을 경우, 간단한 알림 띄우기(은은하게 떳다 사라지는게 좋을거 같음)\r\n            \r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\" >\r\n                <a href=\"#home\" className=\"navbar-brand\">STOCKMAN</a>\r\n\r\n                {/* search bar */}\r\n                <ul className=\"navbar-nav me-auto mt-md-0 \">\r\n                    <li className=\"nav-item hidden-sm-down\">\r\n                        <form className=\"app-search ps-3\" onSubmit={getCompanyInfo}>\r\n                            <input type=\"text\" name='keyword' className=\"form-control\" placeholder=\"종목검색\"/> \r\n                                <a className=\"srh-btn\">\r\n                                    <i className=\"ti-search\">\r\n                                        {/* 검색 */}\r\n                                    </i>\r\n                                </a>\r\n                        </form>\r\n                    </li>\r\n                </ul>\r\n\r\n                <div className=\"me-auto navbar-nav\">\r\n                    {/* <a href=\"#home\" data-rb-event-key=\"#home\" className=\"nav-link active\">Home</a>\r\n                    <a href=\"#features\" data-rb-event-key=\"#features\" className=\"nav-link\">Features</a>\r\n                    <a href=\"#pricing\" data-rb-event-key=\"#pricing\" className=\"nav-link\">Pricing</a> */}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Chart.js",["111","112"],"import React, { useEffect, useRef, useState }  from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\n\r\n/*\r\n  1. 디스포즈 구현 (DOM 제어 에러 발생)\r\n  2. 성능 최적화 (느림)\r\n  3. UI 꾸미기 (버튼, from, to input 상자, 캔들 색상)\r\n  4. 수정주가 계산및 구현\r\n  5. 이동평균선, MACD, 추세선등등 기능 확장\r\n*/\r\n\r\nexport default function Charts () {\r\n  const chart = useRef(null);\r\n\r\n  // 입력받은 기업명 또는 종목코드 가져오기 \r\n  const { code, compName } = useSelector(\r\n    state => ({\r\n        code: state.searchReducer.code,\r\n        compName: state.searchReducer.comp_name,\r\n    }), shallowEqual);\r\n\r\n  // 라이프 사이클을 고려하지 않으면 새로고침할때 2개의 차트가 생겨버린다.\r\n  useEffect(() => {\r\n      /* Chart code */\r\n      // Themes begin\r\n      am4core.useTheme(am4themes_animated);\r\n      //Themes end\r\n\r\n      // Create chart \r\n      let x = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n      x.padding(0, 15, 0, 15);\r\n\r\n      // Load data : 쿼리스트링 처리 해야할듯\r\n      // chart.dataSource.url = \"https://www.amcharts.com/wp-content/uploads/assets/stock/MSFT.csv\";\r\n      // chart.dataSource.parser = new am4core.CSVParser();\r\n\r\n      /* 데이터를 취득하지 못했던 이유: \r\n         1. 쿼리스트링 오타 => code를 id로 표시함\r\n         2. 백엔드에서 페이징을 걸어버려서 JSON 형식이 amcharts4가 읽지 못하는 형식이 되버림\r\n      */ \r\n      x.dataSource.url = `http://localhost:8000/api/daily-price/?code=${code}`;\r\n\r\n      x.dataSource.parser = new am4core.JSONParser();\r\n      x.dataSource.parser.options.emptyAs = 0;\r\n\r\n      x.dataSource.parser.options.useColumnNames = true;\r\n      x.dataSource.parser.options.reverse = true;\r\n\r\n      // the following line makes value axes to be arranged vertically.\r\n      x.leftAxesContainer.layout = \"vertical\";\r\n\r\n\r\n      // 여기서부터 라이브러리의 빠른 테스트를 위해 복붙함\r\n      // uncomment this line if you want to change order of axes\r\n      //chart.bottomAxesContainer.reverseOrder = true;\r\n\r\n      let dateAxis = x.xAxes.push(new am4charts.DateAxis());\r\n      dateAxis.renderer.grid.template.location = 0;\r\n      dateAxis.renderer.ticks.template.length = 8;\r\n      dateAxis.renderer.ticks.template.strokeOpacity = 0.1;\r\n      dateAxis.renderer.grid.template.disabled = true;\r\n      dateAxis.renderer.ticks.template.disabled = false;\r\n      dateAxis.renderer.ticks.template.strokeOpacity = 0.2;\r\n      dateAxis.renderer.minLabelPosition = 0.01;\r\n      dateAxis.renderer.maxLabelPosition = 0.99;\r\n      dateAxis.keepSelection = true;\r\n      dateAxis.minHeight = 30;\r\n\r\n      dateAxis.groupData = true;\r\n      dateAxis.minZoomCount = 5;\r\n\r\n      // these two lines makes the axis to be initially zoomed-in\r\n      // dateAxis.start = 0.7;\r\n      // dateAxis.keepSelection = true;\r\n\r\n      let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\r\n      valueAxis.tooltip.disabled = true;\r\n      valueAxis.zIndex = 1;\r\n      valueAxis.renderer.baseGrid.disabled = true;\r\n      // height of axis\r\n      valueAxis.height = am4core.percent(65);\r\n\r\n      valueAxis.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\r\n      valueAxis.renderer.gridContainer.background.fillOpacity = 0.05;\r\n      valueAxis.renderer.inside = true;\r\n      valueAxis.renderer.labels.template.verticalCenter = \"bottom\";\r\n      valueAxis.renderer.labels.template.padding(1, 1, 1, 1);\r\n\r\n      //valueAxis.renderer.maxLabelPosition = 0.95;\r\n      valueAxis.renderer.fontSize = \"0.8em\"\r\n\r\n      let series = x.series.push(new am4charts.CandlestickSeries());\r\n      series.dataFields.dateX = \"date\";\r\n      series.dataFields.openValueY = \"open\";\r\n      series.dataFields.valueY = \"close\";\r\n      series.dataFields.lowValueY = \"low\";\r\n      series.dataFields.highValueY = \"high\";\r\n      series.clustered = false;\r\n      series.tooltipText = \"open: {openValueY.value}\\nlow: {lowValueY.value}\\nhigh: {highValueY.value}\\nclose: {valueY.value}\";\r\n      series.name = \"JSON\";\r\n      series.defaultState.transitionDuration = 0;\r\n\r\n\r\n      let valueAxis2 = x.yAxes.push(new am4charts.ValueAxis());\r\n      valueAxis2.tooltip.disabled = true;\r\n      // height of axis\r\n      valueAxis2.height = am4core.percent(35);\r\n      valueAxis2.zIndex = 3\r\n      // this makes gap between panels\r\n      valueAxis2.marginTop = 30;\r\n      valueAxis2.renderer.baseGrid.disabled = true;\r\n      valueAxis2.renderer.inside = true;\r\n      valueAxis2.renderer.labels.template.verticalCenter = \"bottom\";\r\n      valueAxis2.renderer.labels.template.padding(2, 2, 2, 2);\r\n      //valueAxis.renderer.maxLabelPosition = 0.95;\r\n      valueAxis2.renderer.fontSize = \"0.8em\"\r\n\r\n      valueAxis2.renderer.gridContainer.background.fill = am4core.color(\"#000000\");\r\n      valueAxis2.renderer.gridContainer.background.fillOpacity = 0.05;\r\n\r\n      let series2 = x.series.push(new am4charts.ColumnSeries());\r\n      series2.dataFields.dateX = \"date\";\r\n      series2.clustered = false;\r\n      series2.dataFields.valueY = \"volume\";\r\n      series2.yAxis = valueAxis2;\r\n      series2.tooltipText = \"{valueY.value}\";\r\n      series2.name = \"Series 2\";\r\n      // volume should be summed\r\n      series2.groupFields.valueY = \"sum\";\r\n      series2.defaultState.transitionDuration = 0;\r\n\r\n      x.cursor = new am4charts.XYCursor();\r\n\r\n      let scrollbarX = new am4charts.XYChartScrollbar();\r\n\r\n      let sbSeries = x.series.push(new am4charts.LineSeries());\r\n      sbSeries.dataFields.valueY = \"close\";\r\n      sbSeries.dataFields.dateX = \"date\";\r\n      scrollbarX.series.push(sbSeries);\r\n      sbSeries.disabled = true;\r\n      scrollbarX.marginBottom = 20;\r\n      x.scrollbarX = scrollbarX;\r\n      scrollbarX.scrollbarChart.xAxes.getIndex(0).minHeight = undefined;\r\n\r\n\r\n\r\n      /**\r\n       * Set up external controls\r\n       */\r\n\r\n      // Date format to be used in input fields\r\n      let inputFieldFormat = \"yyyy-MM-dd\";\r\n\r\n      // dispose후에 버튼을 제어할려고 하니까 에러가 발생한다. document를 직접 제어하는 방법 말고 다른 방법을 써야 한다.\r\n      document.getElementById(\"b1m\").addEventListener(\"click\", function() {\r\n        let max = dateAxis.groupMax[\"day1\"];\r\n        let date = new Date(max);\r\n        am4core.time.add(date, \"month\", -1);\r\n        zoomToDates(date);\r\n      });\r\n      \r\n      document.getElementById(\"b3m\").addEventListener(\"click\", function() {\r\n        let max = dateAxis.groupMax[\"day1\"];\r\n        let date = new Date(max);\r\n        am4core.time.add(date, \"month\", -3);\r\n        zoomToDates(date);\r\n      });\r\n      \r\n      document.getElementById(\"b6m\").addEventListener(\"click\", function() {\r\n        let max = dateAxis.groupMax[\"day1\"];\r\n        let date = new Date(max);\r\n        am4core.time.add(date, \"month\", -6);\r\n        zoomToDates(date);\r\n      });\r\n      \r\n      document.getElementById(\"b1y\").addEventListener(\"click\", function() {\r\n        let max = dateAxis.groupMax[\"day1\"];\r\n        let date = new Date(max);\r\n        am4core.time.add(date, \"year\", -1);\r\n        zoomToDates(date);\r\n      });\r\n      \r\n      document.getElementById(\"bytd\").addEventListener(\"click\", function() {\r\n        let max = dateAxis.groupMax[\"day1\"];\r\n        let date = new Date(max);\r\n        am4core.time.round(date, \"year\", 1);\r\n        zoomToDates(date);\r\n      });\r\n      \r\n      document.getElementById(\"bmax\").addEventListener(\"click\", function() {\r\n        let min = dateAxis.groupMin[\"day1\"];\r\n        let date = new Date(min);\r\n        zoomToDates(date);\r\n      });\r\n\r\n      dateAxis.events.on(\"selectionextremeschanged\", function() {\r\n        updateFields();\r\n      });\r\n\r\n      dateAxis.events.on(\"extremeschanged\", updateFields);\r\n\r\n\r\n      function updateFields () {\r\n        let minZoomed = dateAxis.minZoomed + am4core.time.getDuration(dateAxis.mainBaseInterval.timeUnit, dateAxis.mainBaseInterval.count) * 0.5;\r\n        document.getElementById(\"fromfield\").value = x.dateFormatter.format(minZoomed, inputFieldFormat);\r\n        document.getElementById(\"tofield\").value = x.dateFormatter.format(new Date(dateAxis.maxZoomed), inputFieldFormat);\r\n      };\r\n\r\n\r\n      // fromRef.current.addEventListener(\"keyup\", updateZoom)\r\n\r\n      document.getElementById(\"fromfield\").addEventListener(\"keyup\", updateZoom);\r\n      document.getElementById(\"tofield\").addEventListener(\"keyup\", updateZoom);\r\n\r\n      let zoomTimeout;\r\n      function updateZoom() {\r\n        if (zoomTimeout) {\r\n          clearTimeout(zoomTimeout);\r\n        }\r\n        zoomTimeout = setTimeout(function(e) {\r\n          let start = document.getElementById(\"fromfield\").value;\r\n          let end = document.getElementById(\"tofield\").value;\r\n          if ((start.length < inputFieldFormat.length) || (end.length < inputFieldFormat.length)) {\r\n            return;\r\n          }\r\n          let startDate = x.dateFormatter.parse(start, inputFieldFormat);\r\n          let endDate = x.dateFormatter.parse(end, inputFieldFormat);\r\n\r\n          if (startDate && endDate) {\r\n            dateAxis.zoomToDates(startDate, endDate);\r\n          }\r\n        }, 500);\r\n      };\r\n\r\n      function zoomToDates(date) {\r\n        let min = dateAxis.groupMin[\"day1\"];\r\n        let max = dateAxis.groupMax[\"day1\"];\r\n        dateAxis.keepSelection = true;\r\n      //   dateAxis.start = (date.getTime() - min)/(max - min);\r\n      //   dateAxis.end = 1;\r\n\r\n        dateAxis.zoom({start:(date.getTime() - min)/(max - min), end:1});\r\n    };\r\n\r\n    chart.current = x;\r\n\r\n    return () => {\r\n      // 디스포즈 구현하기\r\n      // x.dispose();\r\n    };\r\n\r\n  }, [code]);\r\n\r\n    /* HTML */ \r\n    return (\r\n      <div className=\"chart-div\">\r\n          <div id=\"controls\" className=\"controls-div\">\r\n              <div className=\"chart-input-div\">\r\n                      기간: <input  type=\"text\" id=\"fromfield\" className=\"amcharts-input\"/>\r\n                      ~   <input type=\"text\" id=\"tofield\" className=\"amcharts-input\"/>\r\n              </div>\r\n\r\n              <div className=\"chart-btns-div\">\r\n                  <button id=\"b1m\" className=\"btn btn-outline-primary\">1개월</button>\r\n                  <button id=\"b3m\" className=\"btn btn-outline-primary\">3개월</button>\r\n                  <button id=\"b6m\" className=\"btn btn-outline-primary\">6개월</button>\r\n                  <button id=\"b1y\" className=\"btn btn-outline-primary\">1년</button>\r\n                  <button id=\"bytd\" className=\"btn btn-outline-primary\">연초누계</button>\r\n                  <button id=\"bmax\" className=\"btn btn-outline-primary\">전체</button>\r\n              </div>\r\n            \r\n          </div>\r\n\r\n      {/* 차트 구현 코드 */}\r\n      <div id=\"chartdiv\" className=\"chart-candle-div\" ></div>\r\n      </div>\r\n    );\r\n};","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\FinancialTable.js",["113","114","115","116","117"],"import React, { useState, useEffect  }  from 'react';\r\nimport axios from 'axios';\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\r\n\r\n/*\r\n    1. 좌우 연도 변경 버튼\r\n    2. 연도, 수치 hover 표시\r\n    3. 적자는 빨간색으로 표시\r\n    4. 폰트 사이즈 조정 (테이블 사이즈 조정)\r\n    5. 수치가 0 이거나 0.00일 경우 N/A 처리 하기\r\n*/\r\nexport default function Tables () {\r\n    const [finData, setFinData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 종목코드 취득\r\n    const { code, compName } = useSelector(\r\n        state => ({\r\n            code: state.searchReducer.code,\r\n            compName: state.searchReducer.comp_name,\r\n        }), shallowEqual);\r\n\r\n        useEffect(() => {\r\n            getFinYearData();\r\n        }, [code]);\r\n\r\n\r\n    /* 검색된 종목의 재무정보 취득 함수*/ \r\n    const getFinYearData = async() => {\r\n        try {\r\n            setError(null);\r\n            setLoading(true);\r\n\r\n            const url = `http://localhost:8000/api/company-state/?code=${code}`;\r\n            const response = await axios.get(url);\r\n            setFinData(response.data);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    // 억 단위 변환\r\n    const moneyFormat = (money) => {\r\n        if (isNA(money) !== \"N/A\"){\r\n            // 적자면 붉은색으로 표시 => isNA와 moneyFormat 함수 둘다 손봐야 할 수 있음\r\n            return Math.floor(money / 100000000).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n        } else {\r\n            return \"N/A\";\r\n        }\r\n\r\n    };\r\n\r\n    // N/A 판별\r\n    const isNA = (number) => {\r\n        if (number === 0 || number === \"0.00\") {\r\n            return \"N/A\";\r\n        } else {\r\n            return number;\r\n        }\r\n    };\r\n    \r\n    /* 조건검색 테이블 변환 함수 */ \r\n\r\n\r\n\r\n    // if (loading) return <div>loading...</div>;\r\n    // if (error) return <div>error.</div>;\r\n    // if (!setFinData) return null;\r\n\r\n    /* HTML */\r\n    return (\r\n        // 좌우 버튼을 두고 연도를 바꿀수 있게끔 만들어야 한다.\r\n\r\n        <div className=\"table-div\">\r\n            <div className=\"table-btns-div\">\r\n            {/* <button className=\"btn btn-primary\">이전</button>\r\n            <button className=\"btn btn-primary\">다음</button> */}\r\n            </div>\r\n\r\n            <table className=\"table table-hover\">\r\n            <thead>\r\n                <tr className=\"active\">\r\n                    {/* 연도 */}\r\n                    <th>실적</th>\r\n                    {finData.map(fin => {\r\n                        return <th key={fin.year}>{fin.year}</th>\r\n                    })}\r\n\r\n                </tr>\r\n            </thead>\r\n            \r\n            <tbody>\r\n                <tr>\r\n                    <th>매출액(억원)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{moneyFormat(fin.revenue)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>매출총이익(억원)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{moneyFormat(fin.gross_profit)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>영업이익(억원)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{moneyFormat(fin.operating_profit)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>당기순이익(억원)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{moneyFormat(fin.net_profit)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>매출액증가율(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.sales_growth_rate)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>영업이익률(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.operating_margin)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>부채비율(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.debt_ratio)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>당좌비율(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.quick_ratio)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>유동비율(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.current_ratio)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n\r\n\r\n                <tr>\r\n                    <th>순이익증가율(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.net_profit_growth_rate)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>자산증가율(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.asset_growth_rate)}</td>\r\n                    })}\r\n                </tr>  \r\n\r\n                <tr>\r\n                    <th>PER(배)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.per)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>EPS(원)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.eps).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>PBR(배)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.pbr)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>BPS(원)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(Math.ceil(fin.bps)).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>BIS(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.bis)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>ROA(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.roa)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>ROE(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.roe)}</td>\r\n                    })}\r\n                </tr>   \r\n\r\n                <tr>\r\n                    <th>자산회전율(%)</th>\r\n                    {finData.map(fin => {\r\n                        return <td key={fin.year}>{isNA(fin.asset_turnover)}</td>\r\n                    })}\r\n                </tr>\r\n\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n        \r\n    )\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\PerformSearch.js",["118","119","120","121","122","123","124","125"],"/* 조건검색 */\r\nimport React, { useState, useEffect  }  from 'react';\r\nimport axios from 'axios';\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\r\n\r\n\r\n/*\r\n    1. 조건 입력 아이템 추가, 삭제\r\n    2. 셀렉트 옵션 설정 (옵션 중복을 어떻게 제외시키지?)\r\n    3. url, quearyString 조합하기\r\n    4. 연도는 무조건 최근 연도\r\n*/\r\nexport default function PerformSearch () {\r\n    /* JS */\r\n    const createConditionItem = () => {\r\n        const options = new Array(\"\")\r\n    }\r\n\r\n    /* HTML */\r\n    return (\r\n        // 검색버튼을 누르면 조건입력창과 검색버튼은 hidden 상태,\r\n        <div className=\"per-input-box-div\">\r\n            <input className=\"btn btn-outline-primary\" type='button' value='검색' />\r\n            <input className=\"btn btn-outline-primary\" type='button' value='조건추가' />\r\n\r\n            <table className=\"table\">\r\n                <thead>\r\n\r\n                    <tr>\r\n                        <th>지표</th>\r\n                    </tr>\r\n\r\n                </thead>\r\n\r\n                <tbody>\r\n\r\n                    <tr>\r\n                        <div>\r\n                            <select>\r\n                                <option>PER</option>\r\n                                <option>BIS</option>\r\n                            </select>\r\n\r\n                            <input type=\"text\" placeholder=\"최소\" />\r\n                            ~\r\n                            <input type=\"text\" placeholder=\"최대\" />\r\n                            <input type=\"button\" className=\"btn btn-default btn-sm\" value=\"삭제\" />\r\n                        </div>\r\n\r\n                        <div>\r\n                            <select>\r\n                                <option>PER</option>\r\n                                <option>BIS</option>\r\n                            </select>\r\n\r\n                            <input type=\"text\" placeholder=\"최소\" />\r\n                            ~\r\n                            <input type=\"text\" placeholder=\"최대\" />\r\n                            <input type=\"button\" className=\"btn btn-default btn-sm\" value=\"삭제\" />\r\n                        </div>\r\n                    </tr>\r\n\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\CompanyBoard.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\NotFound.js",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"126","replacedBy":"130"},{"ruleId":"128","replacedBy":"131"},{"ruleId":"126","replacedBy":"132"},{"ruleId":"128","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":21,"column":12,"nodeType":"136","messageId":"137","endLine":21,"endColumn":18},{"ruleId":"134","severity":1,"message":"138","line":25,"column":11,"nodeType":"136","messageId":"137","endLine":25,"endColumn":21},{"ruleId":"134","severity":1,"message":"139","line":39,"column":7,"nodeType":"136","messageId":"137","endLine":39,"endColumn":17},{"ruleId":"134","severity":1,"message":"140","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":21},{"ruleId":"134","severity":1,"message":"141","line":23,"column":12,"nodeType":"136","messageId":"137","endLine":23,"endColumn":18},{"ruleId":"134","severity":1,"message":"142","line":40,"column":11,"nodeType":"136","messageId":"137","endLine":40,"endColumn":21},{"ruleId":"134","severity":1,"message":"143","line":4,"column":5,"nodeType":"136","messageId":"137","endLine":4,"endColumn":9},{"ruleId":"134","severity":1,"message":"144","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":25},{"ruleId":"134","severity":1,"message":"145","line":1,"column":27,"nodeType":"136","messageId":"137","endLine":1,"endColumn":36},{"ruleId":"146","severity":1,"message":"147","line":59,"column":33,"nodeType":"148","endLine":59,"endColumn":56},{"ruleId":"134","severity":1,"message":"144","line":1,"column":36,"nodeType":"136","messageId":"137","endLine":1,"endColumn":44},{"ruleId":"134","severity":1,"message":"149","line":19,"column":17,"nodeType":"136","messageId":"137","endLine":19,"endColumn":25},{"ruleId":"134","severity":1,"message":"140","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":21},{"ruleId":"134","severity":1,"message":"150","line":14,"column":12,"nodeType":"136","messageId":"137","endLine":14,"endColumn":19},{"ruleId":"134","severity":1,"message":"151","line":15,"column":12,"nodeType":"136","messageId":"137","endLine":15,"endColumn":17},{"ruleId":"134","severity":1,"message":"149","line":18,"column":19,"nodeType":"136","messageId":"137","endLine":18,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":26,"column":12,"nodeType":"154","endLine":26,"endColumn":18,"suggestions":"155"},{"ruleId":"134","severity":1,"message":"144","line":2,"column":17,"nodeType":"136","messageId":"137","endLine":2,"endColumn":25},{"ruleId":"134","severity":1,"message":"145","line":2,"column":27,"nodeType":"136","messageId":"137","endLine":2,"endColumn":36},{"ruleId":"134","severity":1,"message":"156","line":3,"column":8,"nodeType":"136","messageId":"137","endLine":3,"endColumn":13},{"ruleId":"134","severity":1,"message":"140","line":4,"column":10,"nodeType":"136","messageId":"137","endLine":4,"endColumn":21},{"ruleId":"134","severity":1,"message":"157","line":4,"column":23,"nodeType":"136","messageId":"137","endLine":4,"endColumn":34},{"ruleId":"134","severity":1,"message":"158","line":4,"column":36,"nodeType":"136","messageId":"137","endLine":4,"endColumn":48},{"ruleId":"134","severity":1,"message":"159","line":15,"column":11,"nodeType":"136","messageId":"137","endLine":15,"endColumn":30},{"ruleId":"134","severity":1,"message":"160","line":16,"column":15,"nodeType":"136","messageId":"137","endLine":16,"endColumn":22},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],["161"],["162"],["161"],["162"],"no-unused-vars","'target' is assigned a value but never used.","Identifier","unusedVar","'targetTest' is assigned a value but never used.","'buttonText' is assigned a value but never used.","'useDispatch' is defined but never used.","'result' is assigned a value but never used.","'CalRequest' is assigned a value but never used.","'Link' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'compName' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getFinYearData'. Either include it or remove the dependency array.","ArrayExpression",["163"],"'axios' is defined but never used.","'useSelector' is defined but never used.","'shallowEqual' is defined but never used.","'createConditionItem' is assigned a value but never used.","'options' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},"Update the dependencies array to be: [code, getFinYearData]",{"range":"166","text":"167"},[764,770],"[code, getFinYearData]"]