[{"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\index.js":"1","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\config.js":"2","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\Button.js":"3","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\CompInfo.js":"4","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\store\\index.js":"5","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\BoardInputForm.js":"6","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\rootReducer.js":"7","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\extra.js":"8","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\CompanyBoard.js":"9","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\RootReducer.js":"10","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Extra.js":"11","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Counter.js":"12","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Paging.js":"13","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\HTTP.js":"14","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Home.js":"15","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\NotFound.js":"16","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Router.js":"17"},{"size":1499,"mtime":1621507679879,"results":"18","hashOfConfig":"19"},{"size":436,"mtime":1615871790651,"results":"20","hashOfConfig":"19"},{"size":719,"mtime":1616582396855,"results":"21","hashOfConfig":"19"},{"size":2586,"mtime":1622471859219,"results":"22","hashOfConfig":"19"},{"size":235,"mtime":1614057590430,"results":"23","hashOfConfig":"19"},{"size":1287,"mtime":1616992662084,"results":"24","hashOfConfig":"19"},{"size":699,"mtime":1616047365748,"results":"25","hashOfConfig":"19"},{"size":255,"mtime":1616047354951,"results":"26","hashOfConfig":"19"},{"size":743,"mtime":1618223459458,"results":"27","hashOfConfig":"19"},{"size":868,"mtime":1618223544962,"results":"28","hashOfConfig":"19"},{"size":255,"mtime":1616047354951,"results":"29","hashOfConfig":"19"},{"size":2929,"mtime":1618032015001,"results":"30","hashOfConfig":"19"},{"size":6431,"mtime":1621831311092,"results":"31","hashOfConfig":"19"},{"size":2057,"mtime":1618119028653,"results":"32","hashOfConfig":"19"},{"size":2928,"mtime":1622946582734,"results":"33","hashOfConfig":"19"},{"size":270,"mtime":1618127414644,"results":"34","hashOfConfig":"19"},{"size":782,"mtime":1618205184769,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"zefywn",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\index.js",[],["75","76"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\config.js",[],["77","78"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\Button.js",[],["79","80"],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\CompInfo.js",["81"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { Table, TableHead, TableRow, TableCell, TableBody } from \"@material-ui/core\";\r\n\r\n export default function Company () {\r\n    const [compsPosts, setCompPosts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n\r\n    // 스토어에서 상태 조회하고 변수에 저장\r\n    const {pageNum} = useSelector(\r\n        state => ({\r\n            pageNum: state.counter.pageNumber,\r\n        }), shallowEqual);\r\n    \r\n        useEffect(() => {\r\n            fetchComps();\r\n        }, [pageNum]);\r\n\r\n    \r\n\r\n\r\n    // REST-API 서버에서 기업이름과 코드를 비동기로 받아오는 코드\r\n    const fetchComps = async() => {\r\n        try {\r\n            setError(null);\r\n            setCompPosts(null);\r\n            setLoading(true);\r\n\r\n            const url = `http://localhost:8000/company/?page=${pageNum}&data`; \r\n            const response = await axios.get(url);\r\n\r\n            setCompPosts(response.data.results);\r\n        } catch(e) {\r\n            setError(e);\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n\r\n\r\n    if (loading) return <div>loading...</div>;\r\n    if (error) return <div>error.</div>;\r\n    if (!compsPosts) return null;\r\n    \r\n\r\n    return (\r\n        \r\n        <>\r\n        <div>\r\n        <Table>\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell>Code</TableCell>\r\n                <TableCell>Names</TableCell>\r\n                <TableCell>Updated</TableCell>\r\n            </TableRow>\r\n        </TableHead>\r\n\r\n        <TableBody>\r\n            {compsPosts.map(comps => { \r\n                return <tr key={comps.code}><td>{comps.code}</td><td>{comps.company}</td><td>{comps.last_update}</td></tr>\r\n            })}\r\n        </TableBody>\r\n        </Table>\r\n        </div>\r\n\r\n        <div>\r\n            {/* store.getState()로 저장된 state를 가져와, counter.value를 출력한다. \r\n                store의 state구조 :\r\n                counter: {value:0, diff:1}\r\n                필드명을 가지고, 그 필드명 하위로 state가 구성되어 있다. 필드명은 reducer에서 combineReducers 메소드에서 정의한 키와 동일하다. \r\n                별도의 key를 설정하지 않았다면 reducer의 이름과 동일한 필드명을 가지게 된다.\r\n                props.store.getState().counter.value\r\n            */}\r\n        <p><b>page : {pageNum}</b></p>\r\n        </div>\r\n        </>\r\n    );\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\store\\index.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\UI\\atoms\\BoardInputForm.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\rootReducer.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\extra.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\CompanyBoard.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\RootReducer.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Extra.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\modules\\Counter.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\Paging.js",["82","83","84"],"\r\n/** @jsxImportSource @emotion/react */\r\n// 위의 주석 삭제해 버리고 싶다. \r\nimport { useState, useRef } from \"react\";\r\n// import axios from 'axios';\r\n\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\r\nimport { updateCurrnetPage } from '../modules/Counter';\r\nimport { css } from '@emotion/react';\r\n\r\n\r\n\r\nexport default function Pagination () {\r\n\r\n    const {totalPostsCount} = useSelector(\r\n        state => ({\r\n            totalPostsCount: state.counter.totalPosts,\r\n        }), shallowEqual);\r\n\r\n    const dispatch = useDispatch();\r\n    const [postsPerPage] = useState(100);  // 한페이지에 표시하는 게시물수 -> 백엔드에서 자동으로 참조받을수 있어야함\r\n    const [currentPageNumber, setCurrentPageNumber] = useState(1); // 현재 사용자가 보고 있는 페이지 : 1번\r\n    const [target, setTarget] = useState();\r\n    const pageRef = useRef(0);\r\n\r\n    // DOM에 함수를 전달할 때 객체 자체를 전달하면(괄호없이) event객체를 함수에 인자로 전달할수 있다. \r\n    const targetTest = (e) => { // 이벤트 풀링 릴리즈 17부터 이벤트 풀링은 제거됨?\r\n        const value = e.currentTarget.id;\r\n        setTarget(value);\r\n    };\r\n\r\n    /* 전체 페이지 배열을 표시할 게시물수(10개) 단위로 나누기, ceil로 나머지수 올림 */ \r\n    const totalPageCount = Math.ceil(totalPostsCount / postsPerPage); // 242\r\n\r\n    /* Array.from()으로 길이가 totalCount, 값이 (1~totalCount+1)인 배열 생성 */\r\n    const pagesArray = Array.from({length: totalPageCount}, (v, i) => i+1); //1~242\r\n\r\n\r\n/* emotion CSS */ \r\n// 머티리얼 UI 버튼에는 적용 안되고 그 안에 텍스트는 적용됨\r\nconst buttonText = css`\r\nfont-size: 14px;\r\n&:hover {\r\n    color: blue;\r\n}\r\n`;\r\n\r\n/* Mui theme */\r\nconst useStyles = makeStyles(theme => ({\r\n    pageBtn : {\r\n        backgroundColor : '',\r\n        borderRadius : '20px',\r\n        '&:hover': {\r\n            backgroundColor : '#B8DFF8',\r\n        },\r\n    },\r\n    startEndBtn : {\r\n        backgroundColor : '',\r\n        '&:hover': {\r\n            backgroundColor : '#B8DFF8'\r\n        }\r\n    },\r\n    div : {\r\n        marginTop : '10px',\r\n    },\r\n    clickedBtn : {\r\n        backgroundColor : 'red',\r\n    },\r\n}));\r\nconst classes = useStyles();\r\n\r\n\r\n\r\n    /* 페이지 넘버 클릭 특정 함수 */\r\n    const OnClicked = (pageNum) => {\r\n        setCurrentPageNumber(pageNum);\r\n        dispatch(updateCurrnetPage(pageNum));\r\n    };\r\n\r\n    /* 처음, 끝 버튼 클릭 함수 */\r\n    const OnStartEndClicked = (assignPageNum) => {\r\n        dispatch(updateCurrnetPage(assignPageNum));\r\n        setCurrentPageNumber(assignPageNum);\r\n    };\r\n\r\n\r\n\r\n\r\n    /*왜 코드를, 기능을 이렇게 작성했는지 이유와 근거를 써놓으면 나중에 이 코드에 대해 누군가에게 설명할 때 딴소리나 개소리를 안할 수 있다.*/\r\n    /**\r\n     * inputCurrPageNum : currentPageNumber (useState(1))\r\n     * pageArr : pagesArray (길이가 totalCount, 값이 (1~totalCount+1)인 배열. 전체 페이지수의 값이 담긴 배열)\r\n     * startIndex : currPageNum의 값으로부터 -6인 숫자\r\n     * endIndex : currPageNum의 값으로부터 +5인 숫자 \r\n     * ex) currPageNum = 10, startIndex = 4(값:5), endIndex = 15(값:16) 따라서 pageArr.slice(4, 15) 값이 5~15까지인 배열을 만들어 리턴한다.\r\n     * 새로운 배열을 만들어 리턴했기 때문에 인덱스는 항상 0~9다.\r\n     * \r\n    */\r\n    const createSlicedArray = (inputCurrPageNum, pageArr) => { \r\n        let [start, end] = [];\r\n        let startIndex = (inputCurrPageNum - 6);\r\n        let endIndex = (inputCurrPageNum + 5);\r\n        // console.log(\"paging's currPageNum: \"+currPageNum);\r\n\r\n        // 새로고침 눌렀을 때 클릭했던 페이지에 그대로 머물게 해야함 : useRef로 새로고침 감지? 감지되면 기존 페이지 인덱스, 선택 페이지 정보 남기기\r\n        // useRef 를 사용하면?\r\n\r\n        // outOfIndexBend 예외처리 \r\n        if(startIndex < 0) {\r\n            startIndex = 0;\r\n        } else if (endIndex > totalPageCount) {\r\n            endIndex = totalPageCount;\r\n        }\r\n        [start, end] = [startIndex, endIndex];\r\n\r\n        // 처음 10페이지를 표시: 10페이지를 선택하면 15페이지까지, 이전 5페이지까지 보여준다. 1~9페이지까지는 동적 변동 없다.\r\n        if(currentPageNumber < 10){\r\n            return pageArr.slice(0, 10); // 10페이지 미만으로 선택할시 페이징 변화 없음\r\n        }else {\r\n            return pageArr.slice(start, end);; // 10페이지 이상으로 선택할시에 동적으로 11개씩 페이징\r\n        }\r\n    };\r\n\r\n \r\n        /* 페이징 UI 처리 하기 */\r\n        // <div style={{float:'left'}}>\r\n        // css 적용: className={classes.primary}\r\n        return (\r\n            <div className={classes.div}>\r\n                {/* <button id='asd' onClick={targetTest}>target test</button> */}\r\n                <Button className={classes.startEndBtn} onClick={() => OnStartEndClicked(1)}>처음</Button>\r\n                {/* <button id='sss'>test button</button> */}\r\n                {\r\n                // OnClicked() 메서드에서 업데이트한 currentPageNumber를 Paging() 메서드에 보내서 페이징 배열을 재생성한다.\r\n                createSlicedArray(currentPageNumber, pagesArray).map((currentValue, index, array) => {\r\n                    // {console.log('HTML id: '+currentValue);}\r\n                    return ( \r\n                        <Button\r\n                        id={currentValue}\r\n                        ref={pageRef}\r\n                        variant='text'\r\n                        key={index} \r\n                        className={classes.pageBtn}\r\n                        // onClicked() 메서드는 클릭한 인덱스의 값을 setCurrentPageNumber(currentValue)하여 currentPageNumber를 업데이트 시킨다.\r\n                        // 값을 dispatch한다.\r\n                        onClick= { () => OnClicked(currentValue) }> \r\n                        {currentValue} \r\n                        </Button> \r\n                );\r\n                })}\r\n                <Button className={classes.startEndBtn} onClick={() => OnStartEndClicked(totalPageCount)}>끝</Button>\r\n            </div>\r\n        );\r\n}","C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\components\\HTTP.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Home.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\NotFound.js",[],"C:\\Pyvenv\\projects\\site\\stockman\\frontend\\src\\apps\\Router.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"85","replacedBy":"89"},{"ruleId":"87","replacedBy":"90"},{"ruleId":"85","replacedBy":"91"},{"ruleId":"87","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":20,"column":12,"nodeType":"95","endLine":20,"endColumn":21,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":24,"column":12,"nodeType":"99","messageId":"100","endLine":24,"endColumn":18},{"ruleId":"97","severity":1,"message":"101","line":28,"column":11,"nodeType":"99","messageId":"100","endLine":28,"endColumn":21},{"ruleId":"97","severity":1,"message":"102","line":42,"column":7,"nodeType":"99","messageId":"100","endLine":42,"endColumn":17},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],["103"],["104"],["103"],["104"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchComps'. Either include it or remove the dependency array.","ArrayExpression",["105"],"no-unused-vars","'target' is assigned a value but never used.","Identifier","unusedVar","'targetTest' is assigned a value but never used.","'buttonText' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [fetchComps, pageNum]",{"range":"108","text":"109"},[657,666],"[fetchComps, pageNum]"]